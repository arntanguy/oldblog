<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>VIM Proves The World</title><link href="http://arntanguy.github.io/blog/" rel="alternate"></link><link href="http://arntanguy.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://arntanguy.github.io/blog/</id><updated>2016-06-20T00:00:00+02:00</updated><entry><title>Dealing with Optimus and PRIME issues (tearing, screen refresh...)</title><link href="http://arntanguy.github.io/blog/dealing-with-optimus-and-prime-issues-tearing-screen-refresh.html" rel="alternate"></link><published>2016-06-20T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2016-06-20:blog/dealing-with-optimus-and-prime-issues-tearing-screen-refresh.html</id><summary type="html">&lt;p&gt;This is a summary of my solutions to my own issues.
disqus_identifier: geenux-nvidia-prime&lt;/p&gt;
&lt;p&gt;My work has me dealing with GPU computing and OpenGL rendering on a regular basis, and most program I use daily 
require intensive GPU usage. Unfortunately for me, my laptop is blessed with an Optimus setup, of the worst kind, it is entirely muxless.
That means that all display ports (VGA, HDMI, and internal screen) are physically wired to the Intel integrated chipset.
My NVIDIA GTX 660M itself isn't wired directly to the outputs. This means that anything computed by the NVIDIA card will have to be 
shared with the Intel chipset for on-screen rendering. There are two common ways for doing so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;bumblebee&lt;/em&gt;: In that case, applications are manually lanched on the NVIDIA GPU using primusrun, 
and the specific application buffer is then copied to the intel GPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NVIDIA prime is a more recent attempt at solving the issue. With prime in use, everything is rendered on the NVIDIA GPU.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first solution is meant to save battery power, using the NVIDIA GPU "on-demand" when manually requested. This is not a practical solution
for my use case, and as such, I'm stuck with NVIDIA prime solution.&lt;/p&gt;
&lt;p&gt;Here is a summary of the issues I encountered&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything is fine using the internal laptop screen only&lt;/li&gt;
&lt;li&gt;Using external screen, whether over VGA and HDMI output causes extreme tearin. Additionaly, usually either one of the screens
would not be globally refreshed, leading to refresh issues with multiple trailing pointers, or in extreme cases only parts of the screen
where the mouse had moved would be refreshed!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sadly I could not find any solution for the tearing.
According to &lt;a href="https://devtalk.nvidia.com/default/topic/775691/linux/vsync-issue-nvidia-prime-ux32vd-with-gt620-m-/1"&gt;this NVIDIA devtalk&lt;/a&gt; thread, it seems that 
there is no synchronisation between NVIDIA and Intel as of yet, though work is under way and merely waiting to be merged. There is hope yet, keep on following this 
thread to see where it goes.&lt;/p&gt;
&lt;p&gt;I did find a solution for the multi-screen refresh issues. This &lt;a href="https://www.reddit.com/r/archlinux/comments/4cojj9/it_is_probably_time_to_ditch_xf86videointel"&gt;Archlinux Reddit thread&lt;/a&gt;
proposed replacing the bloated DDX driver from intel (x86-video-intel), with its opensource counterpart &lt;em&gt;modesetting&lt;/em&gt; (xf86-video-modesetting).
This did the trick for me, here are the steps I took to do just that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove the intel driver &lt;/p&gt;
&lt;p&gt;::bash
sudo apt-get remove xserver-xorg-video-intel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install modesetting&lt;/p&gt;
&lt;p&gt;::bash
sudo apt-get install xserver-xorg-video-modesetting&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reboot, modesetting ought to be in use. If not, you may add it to your xorg.conf (this should not be necessary)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ServerLayout&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;layout&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Screen&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Inactive&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EndSection&lt;/span&gt;

&lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Device&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;BusID&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PCI:0@0:2:0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Option&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AccelMethod&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SNA&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;modesetting&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EndSection&lt;/span&gt;

&lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Screen&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Device&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;intel&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EndSection&lt;/span&gt;

&lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Device&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Driver&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;BusID&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;PCI:1@0:0:0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Option&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ConstrainCursor&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EndSection&lt;/span&gt;

&lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Screen&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Identifier&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Device&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nvidia&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Option&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AllowEmptyInitialConfiguration&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;on&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;Option&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;IgnoreDisplayDevices&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CRT&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;EndSection&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To lessen the tearing issues, I also switched my window manager to compton, with the following configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Backend&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Backend&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xrender&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;glx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;typically&lt;/span&gt; &lt;span class="nt"&gt;much&lt;/span&gt; &lt;span class="nt"&gt;faster&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;depends&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;sane&lt;/span&gt; &lt;span class="nt"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;glx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="nt"&gt;glx-no-stencil&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Copy&lt;/span&gt; &lt;span class="nt"&gt;unmodified&lt;/span&gt; &lt;span class="nt"&gt;regions&lt;/span&gt; &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="nt"&gt;front&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;instead&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;redrawing&lt;/span&gt; &lt;span class="nt"&gt;them&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;My&lt;/span&gt; &lt;span class="nt"&gt;tests&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;nvidia-drivers&lt;/span&gt; &lt;span class="nt"&gt;show&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;decrease&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;whole&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;increase&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;My&lt;/span&gt; &lt;span class="nt"&gt;tests&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;nouveau&lt;/span&gt; &lt;span class="nt"&gt;show&lt;/span&gt; &lt;span class="nt"&gt;terrible&lt;/span&gt; &lt;span class="nt"&gt;slowdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Useful&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;--glx-swap-method&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;well&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;glx-copy-from-front&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;MESA_copy_sub_buffer&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;partial&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;update&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;My&lt;/span&gt; &lt;span class="nt"&gt;tests&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;nouveau&lt;/span&gt; &lt;span class="nt"&gt;shows&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;200&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt; &lt;span class="nt"&gt;boost&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;4&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;May&lt;/span&gt; &lt;span class="nt"&gt;break&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;available&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Overrides&lt;/span&gt; &lt;span class="nt"&gt;--glx-copy-from-front&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;glx-use-copysubbuffermesa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Avoid&lt;/span&gt; &lt;span class="nt"&gt;rebinding&lt;/span&gt; &lt;span class="nt"&gt;pixmap&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;damage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Probably&lt;/span&gt; &lt;span class="nt"&gt;could&lt;/span&gt; &lt;span class="nt"&gt;improve&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;rapid&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;content&lt;/span&gt; &lt;span class="nt"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;known&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;break&lt;/span&gt; &lt;span class="nt"&gt;things&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;LLVMpipe&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Recommended&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt; &lt;span class="nt"&gt;works&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;glx-no-rebind-pixmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;swap&lt;/span&gt; &lt;span class="nt"&gt;method&lt;/span&gt; &lt;span class="nt"&gt;we&lt;/span&gt; &lt;span class="nt"&gt;assume&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Could&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;exchange&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nt"&gt;3-6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;buffer-age&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;slowest&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;safest&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;copy&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;fastest&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;may&lt;/span&gt; &lt;span class="nt"&gt;fail&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;2-6&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;gradually&lt;/span&gt; &lt;span class="nt"&gt;slower&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;safer&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;6&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;still&lt;/span&gt; &lt;span class="nt"&gt;faster&lt;/span&gt; &lt;span class="nt"&gt;than&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Usually&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;double&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;means&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;triple&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;means&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;buffer-age&lt;/span&gt; &lt;span class="nt"&gt;means&lt;/span&gt; &lt;span class="nt"&gt;auto-detect&lt;/span&gt; &lt;span class="nt"&gt;using&lt;/span&gt; &lt;span class="nt"&gt;GLX_EXT_buffer_age&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;supported&lt;/span&gt; &lt;span class="nt"&gt;by&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Useless&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;--glx-use-copysubbuffermesa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Partially&lt;/span&gt; &lt;span class="nt"&gt;breaks&lt;/span&gt; &lt;span class="nt"&gt;--resize-damage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Defaults&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;glx-swap-method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Shadows&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Enabled&lt;/span&gt; &lt;span class="nt"&gt;client-side&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;shadow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t draw shadows on DND windows.&lt;/span&gt;
&lt;span class="s1"&gt;no-dnd-shadow = true;&lt;/span&gt;
&lt;span class="s1"&gt;# Avoid drawing shadows on dock/panel windows.&lt;/span&gt;
&lt;span class="s1"&gt;no-dock-shadow = true;&lt;/span&gt;
&lt;span class="s1"&gt;# Zero the part of the shadow&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;mask&lt;/span&gt; &lt;span class="nt"&gt;behind&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Fix&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;weirdness&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;ARGB&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;clear-shadow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt; &lt;span class="nt"&gt;radius&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;12&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;shadow-radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt; &lt;span class="nt"&gt;offset&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;-15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;shadow-offset-x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;-5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;top&lt;/span&gt; &lt;span class="nt"&gt;offset&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;-15&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;shadow-offset-y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;-5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;translucency&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nc"&gt;.75&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;shadow-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Set&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;you&lt;/span&gt; &lt;span class="nt"&gt;want&lt;/span&gt; &lt;span class="nt"&gt;different&lt;/span&gt; &lt;span class="nt"&gt;colour&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;shadow-red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;shadow-green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;shadow-blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;shadow&lt;/span&gt; &lt;span class="nt"&gt;exclude&lt;/span&gt; &lt;span class="nt"&gt;options&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;helpful&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;you&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt; &lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Due&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;way&lt;/span&gt; &lt;span class="nt"&gt;compton&lt;/span&gt; &lt;span class="nt"&gt;draws&lt;/span&gt; &lt;span class="nt"&gt;its&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;certain&lt;/span&gt; &lt;span class="nt"&gt;applications&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;visual&lt;/span&gt; &lt;span class="nt"&gt;glitches&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;most&lt;/span&gt; &lt;span class="nt"&gt;applications&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;fine&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;apps&lt;/span&gt; &lt;span class="nt"&gt;that&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;weird&lt;/span&gt; &lt;span class="nt"&gt;things&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;xshapes&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;argb&lt;/span&gt; &lt;span class="nt"&gt;are&lt;/span&gt; &lt;span class="nt"&gt;affected&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="nt"&gt;includes&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;affected&lt;/span&gt; &lt;span class="nt"&gt;apps&lt;/span&gt; &lt;span class="nt"&gt;I&lt;/span&gt; &lt;span class="nt"&gt;found&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;my&lt;/span&gt; &lt;span class="nt"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;! name~=&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;part&lt;/span&gt; &lt;span class="nt"&gt;excludes&lt;/span&gt; &lt;span class="nt"&gt;shadows&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;any&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unknown&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;prevents&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;visual&lt;/span&gt; &lt;span class="nt"&gt;glitch&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;XFWM&lt;/span&gt; &lt;span class="nt"&gt;alt&lt;/span&gt; &lt;span class="nt"&gt;tab&lt;/span&gt; &lt;span class="nt"&gt;switcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;shadow-exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;! name~=&amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name = &amp;#39;Notification&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name = &amp;#39;Plank&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name = &amp;#39;Docky&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name = &amp;#39;Kupfer&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name = &amp;#39;xfce4-notifyd&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name *= &amp;#39;VLC&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name *= &amp;#39;compton&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name *= &amp;#39;Chromium&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name *= &amp;#39;Chrome&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;name *= &amp;#39;Firefox&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g = &amp;#39;Conky&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g = &amp;#39;Kupfer&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g = &amp;#39;Synapse&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g ?= &amp;#39;Notify-osd&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g ?= &amp;#39;Cairo-dock&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g ?= &amp;#39;Xfce4-notifyd&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;class_g ?= &amp;#39;Xfce4-power-manager&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Avoid&lt;/span&gt; &lt;span class="nt"&gt;drawing&lt;/span&gt; &lt;span class="nt"&gt;shadow&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;shaped&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;see&lt;/span&gt; &lt;span class="nt"&gt;also&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;--detect-rounded-corners&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;shadow-ignore-shaped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Opacity&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="nt"&gt;menu-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;inactive-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;active-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;frame-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;inactive-opacity-override&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;alpha-step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.06&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Dim&lt;/span&gt; &lt;span class="nt"&gt;inactive&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt;&lt;span class="nc"&gt;.0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;inactive-dim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Do&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;let&lt;/span&gt; &lt;span class="nt"&gt;dimness&lt;/span&gt; &lt;span class="nt"&gt;adjust&lt;/span&gt; &lt;span class="nt"&gt;based&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;inactive-dim-fixed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Blur&lt;/span&gt; &lt;span class="nt"&gt;background&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Bad&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="nt"&gt;Render&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;preferred&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;blur-background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Blur&lt;/span&gt; &lt;span class="nt"&gt;background&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;opaque&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="nt"&gt;frames&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;well&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;blur-background-frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Do&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;let&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt; &lt;span class="nt"&gt;radius&lt;/span&gt; &lt;span class="nt"&gt;adjust&lt;/span&gt; &lt;span class="nt"&gt;based&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;blur-background-fixed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;blur-background-exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;window_type = &amp;#39;dock&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;window_type = &amp;#39;desktop&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Fading&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Fade&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;during&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;fading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;The&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;between&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;fade&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;milliseconds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;10&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="nt"&gt;fade-delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Opacity&lt;/span&gt; &lt;span class="nt"&gt;change&lt;/span&gt; &lt;span class="nt"&gt;between&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt; &lt;span class="nt"&gt;while&lt;/span&gt; &lt;span class="nt"&gt;fading&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.028&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="nt"&gt;fade-in-step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.03&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Opacity&lt;/span&gt; &lt;span class="nt"&gt;change&lt;/span&gt; &lt;span class="nt"&gt;between&lt;/span&gt; &lt;span class="nt"&gt;steps&lt;/span&gt; &lt;span class="nt"&gt;while&lt;/span&gt; &lt;span class="nt"&gt;fading&lt;/span&gt; &lt;span class="nt"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.03&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="nt"&gt;fade-out-step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nc"&gt;.03&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Fade&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;out&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;opening&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;closing&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;no-fading-openclose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Specify&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;conditions&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;that&lt;/span&gt; &lt;span class="nt"&gt;should&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;faded&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;fade-exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Other&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Try&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;detect&lt;/span&gt; &lt;span class="nt"&gt;WM&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;mark&lt;/span&gt; &lt;span class="nt"&gt;them&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;active&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;mark-wmwin-focused&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Mark&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;non-WM&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;override-redirect&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;active&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;e&lt;/span&gt;&lt;span class="nc"&gt;.g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;menus&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;
&lt;span class="nt"&gt;mark-ovredir-focused&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;EWMH&lt;/span&gt; &lt;span class="nt"&gt;_NET_WM_ACTIVE_WINDOW&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;determine&lt;/span&gt; &lt;span class="nt"&gt;which&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;focused&lt;/span&gt; &lt;span class="nt"&gt;instead&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;using&lt;/span&gt; &lt;span class="nt"&gt;FocusIn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;Out&lt;/span&gt; &lt;span class="nt"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Usually&lt;/span&gt; &lt;span class="nt"&gt;more&lt;/span&gt; &lt;span class="nt"&gt;reliable&lt;/span&gt; &lt;span class="nt"&gt;but&lt;/span&gt; &lt;span class="nt"&gt;depends&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;EWMH-compliant&lt;/span&gt; &lt;span class="nt"&gt;WM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;use-ewmh-active-win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Detect&lt;/span&gt; &lt;span class="nt"&gt;rounded&lt;/span&gt; &lt;span class="nt"&gt;corners&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;treat&lt;/span&gt; &lt;span class="nt"&gt;them&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;rectangular&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;--shadow-ignore-shaped&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;detect-rounded-corners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Detect&lt;/span&gt; &lt;span class="nt"&gt;_NET_WM_OPACITY&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;client&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;useful&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;managers&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;passing&lt;/span&gt; &lt;span class="nt"&gt;_NET_WM_OPACITY&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;client&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;frame&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;prevents&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;being&lt;/span&gt; &lt;span class="nt"&gt;ignored&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;For&lt;/span&gt; &lt;span class="nt"&gt;example&lt;/span&gt; &lt;span class="nt"&gt;without&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;enabled&lt;/span&gt; &lt;span class="nt"&gt;my&lt;/span&gt; &lt;span class="nt"&gt;xfce4-notifyd&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;opacity&lt;/span&gt; &lt;span class="nt"&gt;no&lt;/span&gt; &lt;span class="nt"&gt;matter&lt;/span&gt; &lt;span class="nt"&gt;what&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;detect-client-opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Specify&lt;/span&gt; &lt;span class="nt"&gt;refresh&lt;/span&gt; &lt;span class="nt"&gt;rate&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;If&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;specified&lt;/span&gt; &lt;span class="nt"&gt;or&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;compton&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;try&lt;/span&gt; &lt;span class="nt"&gt;detecting&lt;/span&gt; &lt;span class="nt"&gt;this&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="nt"&gt;RandR&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;refresh-rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Set&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;method&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;methods&lt;/span&gt; &lt;span class="nt"&gt;currently&lt;/span&gt; &lt;span class="nt"&gt;available&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;No&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;drm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;DRM_IOCTL_WAIT_VBLANK&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;May&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;work&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;opengl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Try&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;SGI_video_sync&lt;/span&gt; &lt;span class="nt"&gt;OpenGL&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Only&lt;/span&gt; &lt;span class="nt"&gt;work&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;opengl-oml&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Try&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;OML_sync_control&lt;/span&gt; &lt;span class="nt"&gt;OpenGL&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Only&lt;/span&gt; &lt;span class="nt"&gt;work&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;opengl-swc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Try&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;SGI_swap_control&lt;/span&gt; &lt;span class="nt"&gt;OpenGL&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Only&lt;/span&gt; &lt;span class="nt"&gt;work&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Works&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;GLX&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Known&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;most&lt;/span&gt; &lt;span class="nt"&gt;effective&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;many&lt;/span&gt; &lt;span class="nt"&gt;drivers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Does&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;actually&lt;/span&gt; &lt;span class="nt"&gt;control&lt;/span&gt; &lt;span class="nt"&gt;paint&lt;/span&gt; &lt;span class="nt"&gt;timing&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;buffer&lt;/span&gt; &lt;span class="nt"&gt;swap&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;affected&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;so&lt;/span&gt; &lt;span class="nt"&gt;it&lt;/span&gt; &lt;span class="nt"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nt"&gt;t&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;effect&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;--sw-opti&lt;/span&gt; &lt;span class="nt"&gt;unlike&lt;/span&gt; &lt;span class="nt"&gt;other&lt;/span&gt; &lt;span class="nt"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Experimental&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;opengl-mswc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Try&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;MESA_swap_control&lt;/span&gt; &lt;span class="nt"&gt;OpenGL&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Basically&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;opengl-swc&lt;/span&gt; &lt;span class="nt"&gt;above&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;except&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;extension&lt;/span&gt; &lt;span class="nt"&gt;we&lt;/span&gt; &lt;span class="nt"&gt;use&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Note&lt;/span&gt; &lt;span class="nt"&gt;some&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;methods&lt;/span&gt; &lt;span class="nt"&gt;may&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;enabled&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;compile&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.)&lt;/span&gt;
&lt;span class="nt"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;opengl-swc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Enable&lt;/span&gt; &lt;span class="nt"&gt;DBE&lt;/span&gt; &lt;span class="nt"&gt;painting&lt;/span&gt; &lt;span class="nt"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;intended&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;use&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;VSync&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;hopefully&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;eliminate&lt;/span&gt; &lt;span class="nt"&gt;tearing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Reported&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;have&lt;/span&gt; &lt;span class="nt"&gt;no&lt;/span&gt; &lt;span class="nt"&gt;effect&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;though&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;dbe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Painting&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt; &lt;span class="nt"&gt;X&lt;/span&gt; &lt;span class="nt"&gt;Composite&lt;/span&gt; &lt;span class="nt"&gt;overlay&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;Recommended&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;paint-on-overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Limit&lt;/span&gt; &lt;span class="nt"&gt;compton&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;repaint&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;most&lt;/span&gt; &lt;span class="nt"&gt;once&lt;/span&gt; &lt;span class="nt"&gt;every&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;refresh_rate&lt;/span&gt; &lt;span class="nt"&gt;second&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;boost&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;This&lt;/span&gt; &lt;span class="nt"&gt;should&lt;/span&gt; &lt;span class="nt"&gt;not&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;used&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;--vsync&lt;/span&gt; &lt;span class="nt"&gt;drm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opengl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;opengl-oml&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;they&lt;/span&gt; &lt;span class="nt"&gt;essentially&lt;/span&gt; &lt;span class="nt"&gt;does&lt;/span&gt; &lt;span class="nt"&gt;--sw-opti&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;job&lt;/span&gt; &lt;span class="nt"&gt;already&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;unless&lt;/span&gt; &lt;span class="nt"&gt;you&lt;/span&gt; &lt;span class="nt"&gt;wish&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;specify&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;lower&lt;/span&gt; &lt;span class="nt"&gt;refresh&lt;/span&gt; &lt;span class="nt"&gt;rate&lt;/span&gt; &lt;span class="nt"&gt;than&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;actual&lt;/span&gt; &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;sw-opti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Unredirect&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;full-screen&lt;/span&gt; &lt;span class="nt"&gt;opaque&lt;/span&gt; &lt;span class="nt"&gt;window&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;detected&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;maximize&lt;/span&gt; &lt;span class="nt"&gt;performance&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;full-screen&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;like&lt;/span&gt; &lt;span class="nt"&gt;games&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Known&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;cause&lt;/span&gt; &lt;span class="nt"&gt;flickering&lt;/span&gt; &lt;span class="nt"&gt;when&lt;/span&gt; &lt;span class="nt"&gt;redirecting&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;unredirecting&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;paint-on-overlay&lt;/span&gt; &lt;span class="nt"&gt;may&lt;/span&gt; &lt;span class="nt"&gt;make&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;flickering&lt;/span&gt; &lt;span class="nt"&gt;less&lt;/span&gt; &lt;span class="nt"&gt;obvious&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;unredir-if-possible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Specify&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;conditions&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;that&lt;/span&gt; &lt;span class="nt"&gt;should&lt;/span&gt; &lt;span class="nt"&gt;always&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="nt"&gt;considered&lt;/span&gt; &lt;span class="nt"&gt;focused&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;focus-exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt; &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;WM_TRANSIENT_FOR&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;group&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;consider&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;group&lt;/span&gt; &lt;span class="nt"&gt;focused&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;detect-transient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Use&lt;/span&gt; &lt;span class="nt"&gt;WM_CLIENT_LEADER&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;group&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;consider&lt;/span&gt; &lt;span class="nt"&gt;windows&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;group&lt;/span&gt; &lt;span class="nt"&gt;focused&lt;/span&gt; &lt;span class="nt"&gt;at&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;same&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;WM_TRANSIENT_FOR&lt;/span&gt; &lt;span class="nt"&gt;has&lt;/span&gt; &lt;span class="nt"&gt;higher&lt;/span&gt; &lt;span class="nt"&gt;priority&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="nt"&gt;--detect-transient&lt;/span&gt; &lt;span class="nt"&gt;is&lt;/span&gt; &lt;span class="nt"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;too&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="nt"&gt;detect-client-leader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;#################################&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nt"&gt;Window&lt;/span&gt; &lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;settings&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#################################&lt;/span&gt;

&lt;span class="nt"&gt;wintypes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;fade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fade&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;particular&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;fade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;
        &lt;span class="n"&gt;shadow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="k"&gt;opacity&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="k"&gt;opacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="m"&gt;85&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;focus&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Whether&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;always&lt;/span&gt; &lt;span class="n"&gt;consider&lt;/span&gt; &lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;focused&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;focus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In summary my full setup is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04&lt;/li&gt;
&lt;li&gt;nvidia-364 driver&lt;/li&gt;
&lt;li&gt;xserver-xorg-video-modesetting (instead of intel's one)&lt;/li&gt;
&lt;li&gt;compton window manager&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that, I only experience minimal tearing, and no screen refresh issues.&lt;/p&gt;</summary><category term="linux"></category><category term="ubuntu"></category><category term="nvidia"></category><category term="prime"></category></entry><entry><title>Multi-layered Perceptron using OpenCL</title><link href="http://arntanguy.github.io/blog/multi-layered-perceptron-using-opencl.html" rel="alternate"></link><published>2014-02-28T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2014-02-28:blog/multi-layered-perceptron-using-opencl.html</id><summary type="html">&lt;p&gt;I recently discovered &lt;strong&gt;neural networks&lt;/strong&gt;, and I was instantly very interested by the topic. I am a big fan of computer vision, 
and have always had a feeling that this field was doomed by the sheer amount of possible combinations possible. How could we ever come up with an
algorithm that wouldn't crash at the first unexpected input? How can we analyse complex behaviour, such as distinguishing distress in a metro when
so much trivial noise and movements are going on? How could we ever get robots intelligent enough to cope with their environment as well, or even better than
we do? I believe I'm starting to see a glimmer of hope in neural networks, that we could one day achieve such things, that at the moment seem like a daunting task.
Of course a perceptron is way too simple a network for such things, but one has to start somewhere, hasn't he?&lt;/p&gt;
&lt;p&gt;I am convinced that it is utterly useless to read thousands of pages on neural networks to try and understand their behaviour. The best way to approach them
is by trial and error. In this article, I will show you what a perceptron is, how to implement and train it using &lt;strong&gt;GPU computing with OpenCL&lt;/strong&gt;. &lt;/p&gt;
&lt;h1 id="what-is-a-perceptron"&gt;What is a perceptron&lt;a class="headerlink" href="#what-is-a-perceptron" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A perceptron is basically a binary classifier: it will either tell you that the input values you provided match with the model it that has previously
been learnt, or tell you that they don't. That is for a single output neuron. By providing several outputs, it is possible to use
the perceptron as a classifier, effectively separating the input set in several classes.&lt;/p&gt;
&lt;p&gt;So basically, it is a &lt;strong&gt;linear classifier&lt;/strong&gt;. You're probably wondering what you have to gain using a perceptron instead of SVM (Support Vector Machine),
or similar algorithm. Well, actually not much. The perceptron was discovered before SVM was developped, and since then, SVM has pretty much
replaced all uses of the perceptron. &lt;/p&gt;
&lt;p&gt;Even though, the perceptron can be seen as the very basis of neural networks, and is a stepping stone on which one has to
walk on in order to fully understand the concepts behind neural network algorithms.
As all neural networks, it requires a great amount of inter-connected neurons to provide enough capacity to learn a given model.
It is thus a challenge to use a perceptron to accomplish complicated classification in real-time. Also, the training task can be a daunting computation, that might have
to be ran loads of time before fine-tuning the training to achieve the expected outcome. &lt;/p&gt;
&lt;p&gt;A fully-connected perceptron is probably the simplest neural network you could ever think of. It is composed of several layers, each containing a given number of neurons.
Each neuron of a layer is connected to every single neuron of the following layer. Each connection has an associated weight. It is by adjusting these weights that the network will
tune himself to any linear classification problem, of course given that the network has enough complexity for the given problem (i.e has a sufficient number of neurons and layers 
for it to be able to learn the model). &lt;/p&gt;
&lt;p&gt;There are three types of layers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The input layer&lt;/strong&gt;: it is the first layer, where you set the initial data that your perceptron will be working on.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The hidden layers&lt;/strong&gt;: these are all the layers between the input and output layer. They're basically the ones that will be doing all the work of learning a 
    model and computing input values against the model in order to classify them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The output layer&lt;/strong&gt;: composed of one or several neurons. This layer represents the result of the classification, where each neuron represent a specific class. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each neuron value in the hidden layers and the output layer is computed as the weighted sum of all the neurons' values linked to it by the weights linking them together.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Perceptron layers" src="http://arntanguy.github.io/blog/images/programmation/neural/perceptron.png" /&gt;&lt;/p&gt;
&lt;p&gt;Hopefully, neural networks are generally &lt;strong&gt;highly parallel algorithm&lt;/strong&gt;, and the perceptron is probably their king.
In this article, I will present how to implement a fully-connected perceptron using &lt;strong&gt;OpenCL&lt;/strong&gt;. This article will explain in detail the training algorithm,
along with its naive implementation. A later article will discuss a faster training algorithm, and optimizations to the kernel presented here. &lt;/p&gt;
&lt;h1 id="training-algorithm-gradient-backpropagation"&gt;Training algorithm : gradient backpropagation&lt;a class="headerlink" href="#training-algorithm-gradient-backpropagation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Training a perceptron is a minimization problem. We define a training set as a set of (input -&amp;gt; output) values.
The goal of the training is to find the weights that minimize the distance between the output computed by the 
perceptron on the output corresponding to the same input in the training set.&lt;/p&gt;
&lt;p&gt;In this article we'll train a perceptron that is able to recognise a &lt;strong&gt;xor&lt;/strong&gt; operation. 
First of all, here is the xor truth table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;a&lt;/th&gt;
&lt;th&gt;b&lt;/th&gt;
&lt;th&gt;xor(a,b)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So the goal of the training will be to find the weights needed for the perceptron to give the correct output for all possible inputs a and b of the 
truth table.&lt;/p&gt;
&lt;p&gt;In order to train the weights, we will use an algorithm based on a gradient descent.
First, let us define some notations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(n\)&lt;/span&gt;: number of cells in layer, designed by an index &lt;span class="math"&gt;\(i\)&lt;/span&gt; with &lt;span class="math"&gt;\(0 &amp;lt;= i &amp;lt;= n\)&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(q\)&lt;/span&gt;: number of layers&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(k\)&lt;/span&gt;: index of an output cell&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(c_k\)&lt;/span&gt;: expected output for output cell k for entry x&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(o_k\)&lt;/span&gt;: computed output for output cell k for entry x&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(x_{ij}\)&lt;/span&gt;: input value associated with link between cell i towards cell j&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(w_{ij}\)&lt;/span&gt;: weight&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Succ(i)&lt;/strong&gt;: set of cells that have the output of cell i as an input &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pred(i)&lt;/strong&gt;: set of cells whose output is an input of cell i&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(y_i\)&lt;/span&gt;: weighted sum of cell i &lt;div class="math"&gt;$$y_i = \sum{w_{ij}x_{ij}}$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(o_i\)&lt;/span&gt;: output of cell i &lt;div class="math"&gt;$$o_i = \sigma(y_i)$$&lt;/div&gt; where &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; is the sigmoid function: &lt;div class="math"&gt;$$\sigma(x) = \frac{1}{1+e^{-x}}$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(S\)&lt;/span&gt; : Learning set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Notations" src="http://arntanguy.github.io/blog/images/programmation/neural/perceptron_notation.png" /&gt;&lt;/p&gt;
&lt;p&gt;Before getting deeper into the algorithm, let's just give an overview of what we'll have to do. First, we need to compute the value of every single neuron from the input
to the output layer. Once we have that, we can compare the output with the expected output, and compute the gradient &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; for the output layer.
Then, we compute &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; for every layer based on the value of the following layer. This is a process called backpropagation. 
Finally we update the weight values using the neuron's and &lt;span class="math"&gt;\(\delta\)&lt;/span&gt; values previously computed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The algorithm goes as follow&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Randomly initialize all weights in interval &lt;span class="math"&gt;\([-0.5, 0.5]\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Repeat until convergence&lt;ul&gt;
&lt;li&gt;Pick example &lt;span class="math"&gt;\((x, c)\)&lt;/span&gt; in &lt;span class="math"&gt;\(S\)&lt;/span&gt; (x: input value, c: expected output)&lt;/li&gt;
&lt;li&gt;Compute output &lt;span class="math"&gt;\(o\)&lt;/span&gt; for input &lt;span class="math"&gt;\(x\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;For each output cell &lt;span class="math"&gt;\(i\)&lt;/span&gt; (in output layer)&lt;ul&gt;
&lt;li&gt;Compute &lt;span class="math"&gt;\(\delta_i\)&lt;/span&gt; for each cell of the output layer: &lt;div class="math"&gt;$$\delta_i = \sigma'(y_i)(c_i-o_i) = o_i(1-o_i)(c_i-o_i)$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For each layer from &lt;span class="math"&gt;\(q-1\)&lt;/span&gt; to &lt;span class="math"&gt;\(1\)&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;Compute &lt;span class="math"&gt;\(\delta_i\)&lt;/span&gt; for each cell of the current layer: &lt;div class="math"&gt;$$\delta_i = \sigma'(y_i)\sum_{k\in\text{Succ(i)}}{\delta_k w_{ki}} = o_i(1-o_i)\sum_{k\in\text{Succ(i)}}{\delta_k w_{ki}}$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update weights: for each weight &lt;span class="math"&gt;\(w_{ij}\)&lt;/span&gt;
  &lt;div class="math"&gt;$$w_{ij} = w_{ij} + \epsilon \delta_i x_{ij}$$&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="note-on-thresholding"&gt;Note on thresholding&lt;a class="headerlink" href="#note-on-thresholding" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The values of each layer need to be thresholded. To do so, we add a "virtual neuron", called &lt;em&gt;bias&lt;/em&gt; in each layer, with a fixed value of 1. By updating the associated weights as well, this neuron can be used as an automatic threshold.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bias" src="http://arntanguy.github.io/blog/images/programmation/neural/perceptron_bias.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="implementation"&gt;Implementation&lt;a class="headerlink" href="#implementation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="core-structure"&gt;Core structure&lt;a class="headerlink" href="#core-structure" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have to be able to create an arbitrary number of layers, each containing an arbitrary number of neurons.
Each layer must be connected to the following layer for execution, but also to the previous layer for the training
phase (backpropagation). Thus, the perceptron data structure will be implemented as a double-linked list of layers.&lt;/p&gt;
&lt;p&gt;Thus, we create two main classes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PerceptronLayer : represents a layer of the network. Each layer is composed of:&lt;ul&gt;
&lt;li&gt;an array of neuron values.&lt;/li&gt;
&lt;li&gt;an array representing the weights from this neuron to all neurons of the next layer.&lt;/li&gt;
&lt;li&gt;a pointer to the next layer&lt;/li&gt;
&lt;li&gt;a pointer to the previous layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Perceptron : manages the creation/removal of layers, training, execution of the network. It only needs to 
store a pointer to the first and last layers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="opencl"&gt;OpenCL&lt;a class="headerlink" href="#opencl" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are now going to see how this can be implemented using OpenCL. This section depicts a very raw and poorly implemented
version of the algorithm. It is only meant to be kept simple so that it provides a clear basis onto which further optimisations can be thought of.&lt;/p&gt;
&lt;p&gt;First, let's start with the execution part of the network.&lt;/p&gt;
&lt;h3 id="execution"&gt;Execution&lt;a class="headerlink" href="#execution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The execution is really straightforward. It is just a matter of computing the new value of each neuron based on the weighted sum of all neurons from the previous layer. Thus, the kernel will take as input the weights and values for each input neuron (neurons from the previous layer), and will have as output an array containing the new values of the neurons in the current layer.
The kernel is thus ran in order on the 2nd, 3rd.... Nth layer.&lt;/p&gt;
&lt;p&gt;The following kernel can be used to compute the new value for each neuron. Note that it is far from optimal as local memory isn't used at all for the weighted sum!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;    * @brief Computes one layer of the perceptron given the previous one and the&lt;/span&gt;
&lt;span class="cm"&gt;    * weights&lt;/span&gt;
&lt;span class="cm"&gt;    * The kernel is run once for each layer.&lt;/span&gt;
&lt;span class="cm"&gt;    * The work items are each tasked with computing the output of a single neuron&lt;/span&gt;
&lt;span class="cm"&gt;    * of the out layer.&lt;/span&gt;
&lt;span class="cm"&gt;    *&lt;/span&gt;
&lt;span class="cm"&gt;    * @param out_layer_size&lt;/span&gt;
&lt;span class="cm"&gt;    *   Size of the output layer (number of elements in the output array that will&lt;/span&gt;
&lt;span class="cm"&gt;    *   contain the result for each neuron).&lt;/span&gt;
&lt;span class="cm"&gt;    * @param in_layer_size&lt;/span&gt;
&lt;span class="cm"&gt;    *   Number of elements of the input layer&lt;/span&gt;
&lt;span class="cm"&gt;    * @param in_value&lt;/span&gt;
&lt;span class="cm"&gt;    *   Values of the neuron in the previous layer&lt;/span&gt;
&lt;span class="cm"&gt;    * @param in_weights&lt;/span&gt;
&lt;span class="cm"&gt;    *   Array containing the weights for each input neuron. It is organised as a&lt;/span&gt;
&lt;span class="cm"&gt;    *   two dimensional matrix, written by concatenating each line in the array&lt;/span&gt;
&lt;span class="cm"&gt;    *   [ w11, w12, w13, ...&lt;/span&gt;
&lt;span class="cm"&gt;    *     w21, w22, w23, ...&lt;/span&gt;
&lt;span class="cm"&gt;    *     ..., ..., ..., ...&lt;/span&gt;
&lt;span class="cm"&gt;    *   ]&lt;/span&gt;
&lt;span class="cm"&gt;    *   Where wij is the weight linking the neuron i of the input layer to the&lt;/span&gt;
&lt;span class="cm"&gt;    *   neuron j of the output layer&lt;/span&gt;
&lt;span class="cm"&gt;    *   The last weights of each row represent the weights for the &amp;quot;biais neuron&amp;quot;,&lt;/span&gt;
&lt;span class="cm"&gt;    *   whose role is to threshold the values.&lt;/span&gt;
&lt;span class="cm"&gt;    *   Thus, this kernel should be run with a NDRange of in_layer_size-1&lt;/span&gt;
&lt;span class="cm"&gt;    * @param out_values&lt;/span&gt;
&lt;span class="cm"&gt;    *   Computed values for the current layer&lt;/span&gt;
&lt;span class="cm"&gt;    */&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="nf"&gt;perceptron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;in_layer_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;in_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;in_weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;out_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;in_layer_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;in_layer_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;in_layer_s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;in_weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;in_layer_s&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;in_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;out_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="training"&gt;Training&lt;a class="headerlink" href="#training" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First, we initialize the weights in range &lt;span class="math"&gt;\([-0.5; 0.5]\)&lt;/span&gt;. This is done on the host side, 
as random algorithm can be quite tricky to implement efficiently on GPU.&lt;/p&gt;
&lt;p&gt;All the rest is done in OpenCL. There is a kernel for each step of the algorithm described above.
It should be fairly easy to understand by reading the code and comments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;perceptron_train_output_layer&lt;/strong&gt; : forward propagation that computes delta for the output layer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perceptron_train_backpropagate&lt;/strong&gt; : backpropagation that computes delta for every single layer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perceptron_train_update_weights&lt;/strong&gt; : update the weight based on the previously computed delta-values.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;perceptron_train_update_weights_intertia&lt;/strong&gt; : another version of the algorithm, updating the weights faster when far from convergence, and getting slower and slower as the convergence zone approaches. This requires however to keep track of the weights from the two previous iterations.&lt;/p&gt;
&lt;p 1._1.="1./(1." _="+" exp_-x_="exp(-x));
" return="return"&gt;::opencl
    float sigmoid(float x)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @brief Computes delta for all of the output neurons.&lt;/span&gt;
&lt;span class="cm"&gt; * &lt;/span&gt;
&lt;span class="cm"&gt; * @param values&lt;/span&gt;
&lt;span class="cm"&gt; *      Values of the output layer&lt;/span&gt;
&lt;span class="cm"&gt; * @param expected_values&lt;/span&gt;
&lt;span class="cm"&gt; *      Values expected as output of the perceptron&lt;/span&gt;
&lt;span class="cm"&gt; * @param delta&lt;/span&gt;
&lt;span class="cm"&gt; *      Output of the function: computes the delta needed for the training algorithm&lt;/span&gt;
&lt;span class="cm"&gt; **/&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;perceptron_train_output_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expected_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expected_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;oi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="c1"&gt;// Equivalent to sigmoid&amp;#39;(yi) * (ci-oi)&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oi&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @brief Computes delta for all layers (but the last one) &lt;/span&gt;
&lt;span class="cm"&gt; * &lt;/span&gt;
&lt;span class="cm"&gt; * @param curr_size&lt;/span&gt;
&lt;span class="cm"&gt; *      Size of current layer&lt;/span&gt;
&lt;span class="cm"&gt; * @param succ_layer_size&lt;/span&gt;
&lt;span class="cm"&gt; *      Size of the output layer of current layer &lt;/span&gt;
&lt;span class="cm"&gt; * @param current_layer_values &lt;/span&gt;
&lt;span class="cm"&gt; *      Values of current layer (calculated during forward propagation)&lt;/span&gt;
&lt;span class="cm"&gt; * @param weights&lt;/span&gt;
&lt;span class="cm"&gt; * @param succ_layer_delta_i&lt;/span&gt;
&lt;span class="cm"&gt; *      Values of delta for the next layer &lt;/span&gt;
&lt;span class="cm"&gt; **/&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;perceptron_train_backpropagate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;succ_layer_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;current_layer_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;succ_layer_delta_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// output&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;current_delta_out&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;oi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_layer_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;succ_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;succ_layer_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;succ_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;succ_layer_delta_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;curr_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;current_delta_out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;oi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @brief Update the weights according to values of delta computed during backpropagation&lt;/span&gt;
&lt;span class="cm"&gt; * &lt;/span&gt;
&lt;span class="cm"&gt; * @param out_layer_size&lt;/span&gt;
&lt;span class="cm"&gt; * @param epsilon_value&lt;/span&gt;
&lt;span class="cm"&gt; *      Parameter controlling the rate of convergence.&lt;/span&gt;
&lt;span class="cm"&gt; *      epsilon too low will lead to a very slow convergence,&lt;/span&gt;
&lt;span class="cm"&gt; *      epsilon too high will prevent convergence&lt;/span&gt;
&lt;span class="cm"&gt; * @param pred_values&lt;/span&gt;
&lt;span class="cm"&gt; * @param delta&lt;/span&gt;
&lt;span class="cm"&gt; * @param weights&lt;/span&gt;
&lt;span class="cm"&gt; **/&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;perceptron_train_update_weights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;epsilon_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pred_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pred_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;out_layer_s&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// XXX to change&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// For each weight&lt;/span&gt;
    &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out_layer_s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * @brief Update the weights according to values of delta computed during backpropagation&lt;/span&gt;
&lt;span class="cm"&gt; * Uses the weights computed in the two previous training steps to accelerate convergence.&lt;/span&gt;
&lt;span class="cm"&gt; * &lt;/span&gt;
&lt;span class="cm"&gt; * @param out_layer_size&lt;/span&gt;
&lt;span class="cm"&gt; * @param epsilon_value&lt;/span&gt;
&lt;span class="cm"&gt; *      Parameter controlling the rate of convergence.&lt;/span&gt;
&lt;span class="cm"&gt; *      epsilon too low will lead to a very slow convergence,&lt;/span&gt;
&lt;span class="cm"&gt; *      epsilon too high will prevent convergence&lt;/span&gt;
&lt;span class="cm"&gt; * @param beta_value&lt;/span&gt;
&lt;span class="cm"&gt; *      Parameter controlling the non-linear convergence rate&lt;/span&gt;
&lt;span class="cm"&gt; * @param pred_values&lt;/span&gt;
&lt;span class="cm"&gt; * @param delta&lt;/span&gt;
&lt;span class="cm"&gt; * @param previous_weights2&lt;/span&gt;
&lt;span class="cm"&gt; *        Weights at the k-2 iteration&lt;/span&gt;
&lt;span class="cm"&gt; * @param weights&lt;/span&gt;
&lt;span class="cm"&gt; *        As input, weights at the k-1 iteration.&lt;/span&gt;
&lt;span class="cm"&gt; *        As output, new weight at the k iteration&lt;/span&gt;
&lt;span class="cm"&gt; **/&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;perceptron_train_update_weights_inertia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;epsilon_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;beta_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pred_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;previous_weights2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_global_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out_layer_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out_layer_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pred_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;out_layer_s&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// wij(k-1)&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// wij(k-2)&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;previous_weights2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// XXX to change&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;epsilon_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beta_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//printf(&amp;quot;w1-w2: %f\n&amp;quot;, w1-w2);&lt;/span&gt;
    &lt;span class="c1"&gt;// For each weight&lt;/span&gt;
    &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;epsilon&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;global_id&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out_layer_s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
                        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This article showed how to easily create a perceptron neural network using OpenCL. 
This is one of my first OpenCL projects, and  I'm perfectly aware that this is far from being an optimal 
code. This article was partly meant as a reminder for myself of how I implemented the perceptron, so that I can
later on come back to it and improve upon it. The main thing remaining to do would be to make proper use of local memory,
in order to considerably improve the efficiency of the weighted sums computations. I will describe this in another article later on.&lt;/p&gt;
&lt;p&gt;The full code is available on my github account &lt;a href="https://github.com/geenux/perceptron"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I want to thank &lt;a href="http://www.i3s.unice.fr/~fillatre"&gt;Lionel Filatre&lt;/a&gt;, Professor at the University of Polytech'Nice-Sophia
for his lectures on neural networks. &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="programmation"></category><category term="opencl"></category><category term="neural networks"></category><category term="perceptron"></category></entry><entry><title>Creating a Skybox from a fullscreen quad!</title><link href="http://arntanguy.github.io/blog/creating-a-skybox-from-a-fullscreen-quad.html" rel="alternate"></link><published>2014-01-21T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2014-01-21:blog/creating-a-skybox-from-a-fullscreen-quad.html</id><summary type="html">&lt;p&gt;Creating a skybox is commonly done by either rendering an infite cube or
sphere. Both methods are working nicely, but require to set up VBOs, transfer
data to the GPU... Granted, that's far from the costlier thing you can do, but
then every little bit counts ;)&lt;/p&gt;
&lt;p&gt;In this article, I will show you how to create a skybox by creating a
fullscreen quad in a geometry shader and applying an inverse projection to get
the eye direction as it would be if we were to render a cube. &lt;/p&gt;
&lt;p&gt;Why, will you ask me? Two reasons, it's fun and it's convenient!&lt;/p&gt;
&lt;p&gt;First, let me thank "msell" for &lt;a href="http://gamedev.stackexchange.com/questions/60313/skyboxes-using-glsl-version-330"&gt;the idea&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Skybox using a plane" src="http://arntanguy.github.io/blog/images/programmation/opengl/skybox_plane.png" /&gt;&lt;/p&gt;
&lt;p&gt;The result is quite interesting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notice how the center is of perfect resolution? That's because no distortion
  is applied there, so whatever your environment map resolution was will be
  preserved.&lt;/li&gt;
&lt;li&gt;Notice how the sides are "stretched"? That's because the texture is virtally
  projected on a cube, and thus appears stretched towards us. This gives a
  really deep impression of depth, however it comes at the cost of a little bit
  of motion blur. This side effect could be very useful for designing skyboxes
  for racing games!
  For other types of games, by tweaking the matrices inverted, this effect
  could be lessened.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="geometry-shader"&gt;Geometry shader&lt;a class="headerlink" href="#geometry-shader" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The role of this geometry shader is to emit a fullscreen quad, and send the
view vectors corresponding to each of the corners. These view vectors will be
interpolated when being passed to the fragment shader, resulting in view
vectors for every part of the skybox, that can be used, for instance to fetch
texture information from a samplerCube.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;

    &lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="k"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;uProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="k"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;uWorldToCameraMatrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;smooth&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;eyeDirection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangle_strip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;corner1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;corner2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;corner3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;corner4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Inverse matrix is costly, should be precalculated&lt;/span&gt;
        &lt;span class="c1"&gt;// This is effectively a non-issue there as it is only computed four times&lt;/span&gt;
        &lt;span class="c1"&gt;// and would probably be calculated slower on the CPU (unless the view is&lt;/span&gt;
        &lt;span class="c1"&gt;// fixed, then it&amp;#39;s obviously faster to compute it once and for all).&lt;/span&gt;
        &lt;span class="k"&gt;mat4&lt;/span&gt; &lt;span class="n"&gt;inverseProjection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;mat3&lt;/span&gt; &lt;span class="n"&gt;inverseModelview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;transpose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mat3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uWorldToCameraMatrix&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corner1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;eyeDirection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;inverseModelview&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inverseProjection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;corner1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corner2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;eyeDirection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;inverseModelview&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inverseProjection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;corner2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corner3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;eyeDirection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;inverseModelview&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inverseProjection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;corner3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corner4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;eyeDirection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;inverseModelview&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inverseProjection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;corner4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;EndPrimitive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="fragment-shader"&gt;Fragment shader&lt;a class="headerlink" href="#fragment-shader" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nothing fancy here, we only need to use the eyeDirection vector interpolated
from the geometry shader to fetch the texture in a samplerCube.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt;

    &lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="k"&gt;samplerCube&lt;/span&gt; &lt;span class="n"&gt;cubemap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;smooth&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec3&lt;/span&gt; &lt;span class="n"&gt;eyeDirection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;fragmentColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fragmentColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cubemap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eyeDirection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="usage"&gt;Usage&lt;a class="headerlink" href="#usage" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When rendering it, you need to disable depth testing, so that the fullscreen
quad always appear behind every other object.
Then just generate an empty VAO to activate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vao_skybox&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glDrawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;GL_POINTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programmation"></category><category term="opengl"></category><category term="glsl"></category></entry><entry><title>Using C++11 enum class to define bitfield flags</title><link href="http://arntanguy.github.io/blog/using-c11-enum-class-to-define-bitfield-flags.html" rel="alternate"></link><published>2013-12-16T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-12-16:blog/using-c11-enum-class-to-define-bitfield-flags.html</id><summary type="html">&lt;p&gt;C++11 introduced the notion of &lt;strong&gt;enum class&lt;/strong&gt;, which extends the notion of enum
to make it closer to a struct. Using this new feature, it is quite easy to
achieve bitfield flags by overriding operators.
The following header contains all you need to set up a bitfield enum.
All it does is wrap the enum within a structure and override some bit
manipulation operators &lt;strong&gt;&amp;amp;&lt;/strong&gt;, &lt;strong&gt;|&lt;/strong&gt; and &lt;strong&gt;~&lt;/strong&gt;. This allows you to manipulate
the bitfield very easyly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;ifndef&lt;/span&gt; &lt;span class="n"&gt;__ENUM_FLAGS_H__&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;__ENUM_FLAGS_H__&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type_traits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;


    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Underlying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;underlying_type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;Underlying&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Underlying&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Flags&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="nf"&gt;Flags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;


    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;ENUM_FLAGS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
        &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   \
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;Flags&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; \
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; \
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;underlying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an exemple showing how to use it. Notice the macro &lt;strong&gt;ENUM_FLAGS(T)&lt;/strong&gt;
above? Well, this is all you'll need to make it work. The parameter &lt;strong&gt;T&lt;/strong&gt; is
the name of your enum class. This macro will
automatically override operators for you enum, and thus turn it into a
bitfield.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;enum_flags.h&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;ENUM_FLAGS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TYPE1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TYPE2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;TYPE3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;public:&lt;/span&gt;
            &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TYPE2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;


    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="n"&gt;te&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TYPE2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;constexpr&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;testType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TYPE1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;TYPE2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testType&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;te&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bit matches&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might be wondering about the &lt;strong&gt;1 &amp;lt;&amp;lt; x&lt;/strong&gt; part. It is the same as saying
&lt;span class="math"&gt;\(2^x\)&lt;/span&gt;, that is, setting the bit at the &lt;strong&gt;x&lt;/strong&gt; position to 1.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="programmation"></category><category term="C++"></category><category term="C++11"></category><category term="enum"></category></entry><entry><title>Fullscreen quad with geometry shaders</title><link href="http://arntanguy.github.io/blog/fullscreen-quad-with-geometry-shaders.html" rel="alternate"></link><published>2013-12-13T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-12-13:blog/fullscreen-quad-with-geometry-shaders.html</id><summary type="html">&lt;p&gt;One question that we see pop up from time to time on various OpenGL forums
concerns the creation of fullscreen quads. Most of the solutions given are
sending two fullscreen triangles to a vertex shader. While this approach works,
it isn't optimal for graphics card using geometry shaders. 
And guess what? It is much easier to do it using geometry shaders!&lt;/p&gt;
&lt;p&gt;Here are the shaders you'll need:&lt;/p&gt;
&lt;p&gt;An empty vertex shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A geometry shader emitting a fullscreen quad&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Emits a fullscreen quad&lt;/span&gt;
&lt;span class="cm"&gt;     * Make sure that the input is an empty VAO emitting a dummy GL_POINT&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangle_strip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;UV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;UV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;UV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;UV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;gl_Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;UV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;EmitVertex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;EndPrimitive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And a dummy fragment shader&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="mi"&gt;330&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;

    &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="k"&gt;vec4&lt;/span&gt; &lt;span class="n"&gt;out_Color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;vec2&lt;/span&gt; &lt;span class="n"&gt;UV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;uniform&lt;/span&gt; &lt;span class="k"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;Texture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;out_Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;UV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, to use it, all you need to do is bind all three shaders, and emmit an
empty VAO.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Issue a dummy VAO call to send one point to the graphics card.&lt;/span&gt;
&lt;span class="cm"&gt;     * It will then be able to generate a fullscreen quad&lt;/span&gt;
&lt;span class="cm"&gt;     **/&lt;/span&gt;
    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vao&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glDrawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;GL_POINTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Don&amp;#39;t forget to clear the vertex array, or you might run into some&lt;/span&gt;
    &lt;span class="c1"&gt;// ugly surprises, like segfaults on glDrawArray calls for instance.&lt;/span&gt;
    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this doesn't work, make sure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your graphics card supports geometry shaders&lt;/li&gt;
&lt;li&gt;The shaders are correctly bound&lt;/li&gt;
&lt;li&gt;The geometry emitted is &lt;strong&gt;a point&lt;/strong&gt; (empty VAO shown above)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it, you can now create fullscreen quads!
An exemple of post-processsing with an FBO can be found
&lt;a href="http://arntanguy.github.io/blog/using-cgengines-fbos.html"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="programmation"></category><category term="opengl"></category><category term="glsl"></category><category term="shaders"></category><category term="geometry shader"></category></entry><entry><title>Loading a Blender scene in Physijs and Three.js</title><link href="http://arntanguy.github.io/blog/loading-a-blender-scene-in-physijs-and-threejs.html" rel="alternate"></link><published>2013-12-11T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-12-11:blog/loading-a-blender-scene-in-physijs-and-threejs.html</id><summary type="html">&lt;h1 id="la-nuit-de-linfo"&gt;La Nuit de l'Info&lt;a class="headerlink" href="#la-nuit-de-linfo" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It is quite interesting to realize the context in which these tools have been
written. It was all done during an event called "&lt;a href="http://www.nuitdelinfo.com/"&gt;La Nuit de l'Info&lt;/a&gt;". It is a
national event held every year in France in which engineers students are competing from sunset to dawn over
a number of challenges. These challenges spawn an impressive number of
technologies, ranging from digging up some very old protocols to using some
mainstream technologies, passing through Django, Javascript, Android, WebGL...
Well you get the idea, that's a lot of possibilites for just a night!&lt;/p&gt;
&lt;p&gt;Our team ".pyVerts" won 3 challenges, sadly none of them concerns this article
on WebGL. Nonetheless, what will be presented here might not have been material
for winning challenges, but certainly did a lot more good than most projects out there: it led to some pretty useful code that could possibly be used by anyone!&lt;/p&gt;
&lt;h1 id="threejs-physijs-and-blender-how-to-fit-them-together"&gt;Three.js, Physijs and Blender: How to fit them together?&lt;a class="headerlink" href="#threejs-physijs-and-blender-how-to-fit-them-together" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="Three.js"&gt;three.js&lt;/a&gt; is a really good 3D WebGL engine. It contains most of what
you need to create a game: shader's support, materials, texture, camera,
raycasting, and much more.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chandlerprall.github.io/Physijs/"&gt;Physijs&lt;/a&gt; is a physics engine plugin for Three.js. It is based on the quite famous Bullet Physics engine.&lt;/li&gt;
&lt;li&gt;&lt;a href="www.blender.org"&gt;Blender&lt;/a&gt; is an opensource modelling tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will present the rest of this article in the same order as the ideas I had
for the night, so that you can grasp the thought process that led me to write
    additional tools for Three.js.&lt;/p&gt;
&lt;h1 id="first-step-loading-a-blender-scene-in-threejs"&gt;First step: Loading a blender scene in Three.js&lt;a class="headerlink" href="#first-step-loading-a-blender-scene-in-threejs" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="install-the-json-export-plugin-for-blender"&gt;Install the JSON export plugin for Blender&lt;a class="headerlink" href="#install-the-json-export-plugin-for-blender" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hopefully, loading a blender scene in Three.js engine is pretty easy. You just
need to use the JSON exporter for blender along with the JSONLoader from
Three.js. I will show you a version of that with the addition of the integration of Physijs.&lt;/p&gt;
&lt;p&gt;Here is how to install my version of the blender export plugin:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Update: &lt;/strong&gt; Thanks to some user submissions, the plugin and loading code has been improved. See the updates section at the end of this article to get the newest files. The installation method is the same.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download &lt;a href="http://arntanguy.github.io/blog/download/io_mesh_threejs_physijs.tar.gz"&gt;the modified exporter for blender 2.69&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Untar it in ~/.config/blender/2.69/scripts/addons&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then go to Blender "User Preferences"-&amp;gt;"Addons", and look for "three" in the
research bar. Activate it.&lt;/p&gt;
&lt;h2 id="whats-new"&gt;What's new&lt;a class="headerlink" href="#whats-new" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Exporter modification" src="http://arntanguy.github.io/blog/images/programmation/blender/blender_threejs.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, in the Mesh panel, there is an additionnal &lt;strong&gt;PHYSICS section&lt;/strong&gt;.
To use it, just select (in object mode) the mesh that you're interested in, and
set its properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shape: the physics representation of the object (box, sphere, convex hull...).&lt;/li&gt;
&lt;li&gt;Mass: self-explanatory, set it to 0 if you want a static object&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="export-scene"&gt;Export scene&lt;a class="headerlink" href="#export-scene" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Select all objects within the scene (including cameras and lights), and click
on the menu "File-&amp;gt;Export-&amp;gt;Threejs"&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure that "scene" and "camera" are checked!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it, you should now have a JSON scene file that you can use with three.js&lt;/p&gt;
&lt;h1 id="load-scene"&gt;Load scene&lt;a class="headerlink" href="#load-scene" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I wrote a modified version of the JSON Loader reading the physics parameters
from Blender.&lt;/p&gt;
&lt;p&gt;First, &lt;a href="https://raw.github.com/geenux/.jSuisUn.pyVert/master/webgl/libs/PhysicsSceneLoader.js"&gt;download this class&lt;/a&gt;.
Now to load a scene, you can look at &lt;a href="https://raw.github.com/geenux/.jSuisUn.pyVert/master/webgl/tests/PhysicsLoader/physics_load_scene.html"&gt;this example loader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The interesting part is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PhysicsSceneLoader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callbackProgress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callbackProgress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scene.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callbackFinished&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is two callback functions.
You can use this one to show a progress bar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callbackProgress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this one to handle what to do when loading is finished&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;callbackFinished&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="c1"&gt;// Add gravity to the scene&lt;/span&gt;
        &lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setGravity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;9.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// Start the physics simulation&lt;/span&gt;
        &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;simulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable &lt;em&gt;loaded&lt;/em&gt; now contains all the scene.
You can use &lt;em&gt;loaded.scene&lt;/em&gt; to access the scene object. For instace, if you want
to render it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll have access to all objects loaded through &lt;em&gt;loaded.objects&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well you get the gist of it!&lt;/p&gt;
&lt;h1 id="how-to-improve-the-export-script"&gt;How to improve the export script&lt;a class="headerlink" href="#how-to-improve-the-export-script" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The export script is far from complete as far as physics is concerned. So here is the gist of how to improve
it.&lt;/p&gt;
&lt;p&gt;If you lack properties, you can easily integrate them by following the following steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In export_threejs.py&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify the &lt;em&gt;TEMPLATE_OBJECT&lt;/em&gt; variable&lt;/li&gt;
&lt;li&gt;Modify the &lt;em&gt;object_string&lt;/em&gt; in generate_object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In &lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Define your element at the top of the file Something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;THREE_physicsShape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EnumProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;BoxMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;BoxMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cube-like mesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PlaneMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PlaneMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Plane&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;SphereMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;SphereMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Sphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CylinderMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CylinderMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cylinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ConeMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ConeMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Cone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CapsuleMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CapsuleMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Capsule&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ConvexMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ConvexMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Convex hull of object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ConcaveMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ConcaveMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Concave&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HeightfieldMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;HeightfieldMesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;matches a regular grid of height values given in the z-coordinatesHeightfield&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Mesh Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add it to the &lt;em&gt;OBJECT_PT_physics&lt;/em&gt; class&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In the engine&lt;/strong&gt;, add it to &lt;strong&gt;PhysicsLoader.js&lt;/strong&gt;:
Look for where the Physijs.Mesh are defined, and do the proper changes, that's it, you're all set!&lt;/p&gt;
&lt;h1 id="troubleshoot"&gt;Troubleshoot&lt;a class="headerlink" href="#troubleshoot" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;My physics bounding volume seems way bigger than the real object&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There my friend, you probably just encountered one of the most common problems with blender. By default, exporting doesn't apply scale to your mesh, quite stupid ain't it.
Hopefully it is very easy to solve: select your model in Blender, and then hit Ctrl-A -&amp;gt; Apply Rotation and Scale.
That's it, you're done ;)&lt;/p&gt;
&lt;h1 id="updates"&gt;Updates&lt;a class="headerlink" href="#updates" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Kevin Bikhazi improved upon my plugin. You can find &lt;a href="http://arntanguy.github.io/blog/download/io_mesh_threejs_physijs_update1.tar.gz"&gt;the modified exporter for blender 2.69 here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is the changelog&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adds friction and restitution parameters under an object's material tab in Blender. These parameters are very important as they affect how the model interacts with the physics world.&lt;/li&gt;
&lt;li&gt;The Blender add-on has been modified to handle the new material parameters.  Currently the mods only work with standard materials and not with normal mapped materials.  It should be pretty easy to get it to work with normal maps, that might come soon&lt;/li&gt;
&lt;li&gt;PhysicsSceneLoader.js modified to use the new friction and restitution parameters.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To install it, just untar, and copy the files to the proper location as specified in the article.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;a class="headerlink" href="#conclusion" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It's probably far from the best way of loading physics within three.js: it
was written during a crazy night of coding! Yet, I hope this helps to give you
ideas of how to automatically load geometry and physics within your webgl
application.&lt;/p&gt;</summary><category term="programmation"></category><category term="webgl"></category><category term="blender"></category><category term="js"></category><category term="javascript"></category></entry><entry><title>Using CGEngine's FBOs</title><link href="http://arntanguy.github.io/blog/using-cgengines-fbos.html" rel="alternate"></link><published>2013-12-09T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-12-09:blog/using-cgengines-fbos.html</id><summary type="html">&lt;p&gt;Create a FBO:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt; &lt;span class="n"&gt;fbo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;windowSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;windowSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;COLOR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Link its internal texture to rendering shader (the one used to render on a
visible fullscreen quad for instance).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Shader&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadVertexShaderFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../src/fullscreen_quad.vert&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadGeometryShaderFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../src/fullscreen_quad.geom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadFragmentShaderFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../src/fullscreen_quad.frag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Activate shader&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Link texture&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTexture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Texture&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getColorTextureId&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do the linking texture step only &lt;em&gt;once&lt;/em&gt; before the rendering. There is no point in linking it every time! Anyway that wouldn't work properly if you were to do that.&lt;/p&gt;
&lt;p&gt;Now you can activate the FBO in the render loop and render on it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// Activate render to FBO&lt;/span&gt;
    &lt;span class="n"&gt;fbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;renderToFBO&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Clear the FBO (equivalent to glClear(...))&lt;/span&gt;
    &lt;span class="n"&gt;fbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     *  drawing...&lt;/span&gt;
&lt;span class="cm"&gt;     *  We fill the array and then activate the Vertex Attrib 0&lt;/span&gt;
&lt;span class="cm"&gt;     **/&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GL_FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Draw triangles&lt;/span&gt;
    &lt;span class="n"&gt;glDrawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_TRIANGLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Disable Vertex array when not needed anymore&lt;/span&gt;
    &lt;span class="n"&gt;glDisableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rendering part on the FBO is finished. After this step, you should have a triangle drawn on the FBO's texture.
All that's left to do is display the texture to check whether everything is fine.
This can be done using a fullscreen quad. The code below uses a geometric
shader to generate the quad, and a fragment shader to texture it with the
previously generated texture.
Note that we don't need to bind the FBO's texture to the shader since this has
been done &lt;strong&gt;&lt;em&gt;before&lt;/em&gt;&lt;/strong&gt; the rendering loop.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FBO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;renderToScreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * Issue a dummy VAO call to send one point to the graphics card.&lt;/span&gt;
&lt;span class="cm"&gt;     * It will then be able to generate a fullscreen quad&lt;/span&gt;
&lt;span class="cm"&gt;     * Since we&amp;#39;ve bound the FBO&amp;#39;s render texture to the uniform Texture of&lt;/span&gt;
&lt;span class="cm"&gt;     * the shader, we only need a sampler2D Texture; in the fragment shader&lt;/span&gt;
&lt;span class="cm"&gt;     * to make it work!&lt;/span&gt;
&lt;span class="cm"&gt;     **/&lt;/span&gt;
    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;vao&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glDrawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;GL_POINTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Don&amp;#39;t forget to clear the vertex array, or you might run into some&lt;/span&gt;
    &lt;span class="c1"&gt;// ugly surprises, like segfaults on glDrawArray calls for instance.&lt;/span&gt;
    &lt;span class="n"&gt;glBindVertexArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find the fullscreen quad shaders &lt;a href="http://arntanguy.github.io/blog/fullscreen-quad-with-geometry-shaders.html"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="programmation"></category><category term="opengl"></category><category term="FBO"></category><category term="glsl"></category></entry><entry><title>Install Ubuntu on MSI-GE60 0NC</title><link href="http://arntanguy.github.io/blog/install-ubuntu-on-msi-ge60-0nc.html" rel="alternate"></link><published>2013-05-10T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-05-10:blog/install-ubuntu-on-msi-ge60-0nc.html</id><summary type="html">&lt;p&gt;Hi,
It’s been a while since I last had a bit of trouble installing Ubuntu, so I decided to write a small article about it.
Don’t expect screenshots, I don’t want to go back to the installer just for the sake of some nice images.&lt;/p&gt;
&lt;p&gt;I will here explain how I installed a dualboot Windows 8/Ubuntu on my new &lt;strong&gt;MSI GE60 ONC&lt;/strong&gt; laptop.&lt;/p&gt;
&lt;h1 id="uefi"&gt;UEFI&lt;a class="headerlink" href="#uefi" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The main difference I encountered was the introduction of UEFI. Don’t worry if you had never heard of that before, I discovered it while installing Ubuntu on my new laptop as well! Basically, it is meant to replace the old BIOS architecture with a more flexible one.&lt;/p&gt;
&lt;p&gt;What the &lt;a href="https://help.ubuntu.com/community/UEFI"&gt;Ubuntu documentation&lt;/a&gt; on UEFI recommends is to install both Windows and Ubuntu using the UEFI mode.&lt;/p&gt;
&lt;p&gt;Unfortunately, for some reason that I was unable to figure out, I wasn’t able to properly boot the LiveUSB on UEFI mode: it kept on giving me a black screen (and from what I saw on the forums, I’m not the only one).&lt;/p&gt;
&lt;p&gt;&lt;img alt="UEFI" src="http://arntanguy.github.io/blog/images/linux/UEFI.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The workaround I used consists of booting and installing in Legacy Mode. To go into legacy mode, just press "Del." on startup to enter the BIOS, and change the "Boot" options to Legacy instead of UEFI.&lt;/p&gt;
&lt;p&gt;Then, install the dualboot as usual (reduce windows partition size, create a new one for linux, extend the Data partition, add a swap partition).&lt;/p&gt;
&lt;p&gt;You will also need to create a special partition for the BIOS support of Legacy. To do so, create a small partition using gparted (&amp;gt;1Mb), and set the Flag grub_bios (or something like that).&lt;/p&gt;
&lt;p&gt;You’re done.&lt;/p&gt;
&lt;p&gt;Now,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to start Linux, go into the BIOS and set it to Legacy&lt;/li&gt;
&lt;li&gt;to start Windows, go into the BIOS and set it to UEFI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I know, it’s quite an ugly workaround, but that did the trick, and I’m barely even starting windows, so for me going into the bios when I need to start it is not so much of a bother.&lt;/p&gt;
&lt;p&gt;You could try using the boot-repair utility to convert the legacy booting process to UEFI. It is supposed to work quite well, however I ran into topics of users that tried it and failed. So I didn’t bother investigating any further. Let me know if you manage to do it successfully ;)&lt;/p&gt;</summary><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>ShaderMaker: Fix bug with geometry shaders!</title><link href="http://arntanguy.github.io/blog/shadermaker-fix-bug-with-geometry-shaders.html" rel="alternate"></link><published>2013-02-03T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2013-02-03:blog/shadermaker-fix-bug-with-geometry-shaders.html</id><summary type="html">&lt;p&gt;Hi!&lt;/p&gt;
&lt;p&gt;I’ve just tried ShaderMaker, which seemed like a great shader editor, and one of the only existing ones that is truly cross-plateform.&lt;/p&gt;
&lt;p&gt;However, I’m still an unlucky student stuck with an integrated intel chipset, which obviously doesn’t support geometry shaders. Unfortunaly, when I tried editing a fragment shader  I bumped into a nice Segmentation fault!&lt;/p&gt;
&lt;p&gt;I looked it up online, and the only information I could find was that ShaderMaker crashed whenever geometry shader weren’t supported by the graphics card.&lt;/p&gt;
&lt;p&gt;Strangely enough, I couldn’t find any patch, despite the number of people complaining about it… So I decided to get my hands dirty, after all, I’m programming a physic engine and a bunch of shaders at the moment, so how hard could it be to fix a segmentation fault?&lt;/p&gt;
&lt;p&gt;Not hard at all! The bug is a mere problem of indices, that causes the program to look for a non-existing text editor. That’s all.&lt;/p&gt;
&lt;p&gt;Since I didn’t really have the time to delve into the code, I merely hacked the incriminated index back into behaving itself. It should work for everybody, even lucky possessors of geometry shaders enabled cards (even though they don’t need this fix).&lt;/p&gt;
&lt;p&gt;So here goes the magick:&lt;/p&gt;
&lt;p&gt;Download the patched version of the sources from &lt;a href="http://dl.free.fr/jRYRjmwEb"&gt;http://dl.free.fr/jRYRjmwEb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then build it using the usual method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    qmake -unix ShaderMaker.pro
    make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s it, you’re all set and it should work.&lt;/p&gt;
&lt;p&gt;Just in case, I’m also posting the diff file here&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    diff --git a/src/editwindow.cpp b/src/editwindow.cpp
    index 703b95a..1da7461 100644
    --- a/src/editwindow.cpp
    +++ b/src/editwindow.cpp
    @@ -320,7 +320,7 @@ createMenus
    */
    void CBaseEditWindow::createMenus( IShader* )
    {
    - // files
    + // files
    m_menuFile = menuBar()-&amp;amp;gt;addMenu( tr( &amp;quot;&amp;amp;amp;File&amp;quot; ) );
    m_menuFile-&amp;amp;gt;addAction( m_actNew );
    m_menuFile-&amp;amp;gt;addAction( m_actOpen );
    @@ -449,7 +449,7 @@ void CSdiEditWindow::uploadShaderSource( IShader* shader )
    {
    if( m_attachToShader )
    {
    - shader-&amp;amp;gt;setShaderSource( m_document-&amp;amp;gt;shaderType(),
    + shader-&amp;amp;gt;setShaderSource( m_document-&amp;amp;gt;shaderType(),
    m_document-&amp;amp;gt;document()-&amp;amp;gt;toPlainText() );
    }
    else // disabled by the user
    @@ -766,7 +766,6 @@ void CMdiEditWindow::createMenus( IShader* shader )
    m_menuView-&amp;amp;gt;addAction( m_actToSDI );
    }

    -
    /*
    ========================
    createTabs
    @@ -777,6 +776,8 @@ void CMdiEditWindow::createTabs( IShader* shader )
    m_tabs = new QTabWidget();

    // add tabs
    + qDebug() &amp;amp;lt;&amp;amp;lt; &amp;quot;Creating &amp;quot; &amp;amp;lt;&amp;amp;lt; IShader::MAX_SHADER_TYPES &amp;amp;lt;&amp;amp;lt; &amp;quot; editors\n&amp;quot; ; + m_geometryShaderAvailable = shader-&amp;amp;gt;isShaderTypeAvailable(IShader::TYPE_GEOMETRY);
    for( int i = 0 ; i &amp;amp;lt; IShader::MAX_SHADER_TYPES ; i++ ) { m_editors[ i ] = NULL; @@ -805,14 +806,26 @@ void CMdiEditWindow::createTabs( IShader* shader ) connect( m_signalMapper, SIGNAL(mapped(int)), m_tabs, SLOT(setCurrentIndex(int)) ); } - /* ======================== positionChanged ======================== +XXX: Contains a hack to fix a bug occuring on low-end graphics card that don&amp;#39;t support +geometry shaders... Tabs index becomes invalid, and thus causes a segfault. +The fix is merely a correction of indices in case geometry shaders aren&amp;#39;t present. +It is not meant to be an optimal fix, I didn&amp;#39;t have time to delve into the code. +This should still work with geometry shaders present, though this is untested. */ void CMdiEditWindow::positionChanged( void ) { - QTextCursor cursor = m_editors[m_tabs-&amp;amp;gt;currentIndex()]-&amp;amp;gt;textCursor();
    + int index = m_tabs-&amp;amp;gt;currentIndex();
    + /**
    + * XXX: Hack to fix geometry shader bug
    + **/
    + if(!m_geometryShaderAvailable &amp;amp;amp;&amp;amp;amp; m_tabs-&amp;amp;gt;currentIndex() == 1) {
    + index = 2;
    + }
    + CSourceEdit *edit = m_editors[index];
    + QTextCursor cursor = edit-&amp;amp;gt;textCursor();
    int ln = cursor.blockNumber() + 1;
    int col = cursor.columnNumber() + 1;
    m_lineNumber-&amp;amp;gt;setText( &amp;quot;Ln: &amp;quot; + QString::number(ln) + &amp;quot; | Col: &amp;quot; + QString::number(col) );
    @@ -831,7 +844,7 @@ CSourceEdit* CMdiEditWindow::activeDocument( void )
    // do not type cast. does not hurt, since there are only 3 elements...
    for( int i = 0 ; i &amp;amp;lt; IShader::MAX_SHADER_TYPES ; i++ )
    {
    - if( m_editors[ i ] != NULL &amp;amp;amp;&amp;amp;amp;
    + if( m_editors[ i ] != NULL &amp;amp;amp;&amp;amp;amp;
    m_editors[ i ] == widget )
    {
    return m_editors[ i ];
    @@ -854,7 +867,7 @@ int CMdiEditWindow::tabToShader( int tabIndex )
    // look up the widget... it only take 3 loops...
    for( int i = 0 ; i &amp;amp;lt; IShader::MAX_SHADER_TYPES ; i++ )
    {
    - if( m_editors[ i ] != NULL &amp;amp;amp;&amp;amp;amp;
    + if( m_editors[ i ] != NULL &amp;amp;amp;&amp;amp;amp;
    m_editors[ i ] == widget )
    {
    return i;
    diff --git a/src/editwindow.h b/src/editwindow.h
    index 0a5fc20..33a8a9d 100644
    --- a/src/editwindow.h
    +++ b/src/editwindow.h
    @@ -305,6 +305,7 @@ private:
    // all documents
    CSourceEdit** m_editors; // [ IShader::MAX_SHADER_TYPES ]
    bool* m_attachToShader; // [ IShader::MAX_SHADER_TYPES ]
    + bool m_geometryShaderAvailable; // XXX: Hack to fix geometry shader bug on low end graphics card

    // actions
    QAction* m_actNextShader;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programmation"></category><category term="shadermaker"></category><category term="bugfix"></category><category term="glsl"></category><category term="shaders"></category><category term="shader editor"></category></entry><entry><title>Install ArchLinux on Dell Latitude E5420</title><link href="http://arntanguy.github.io/blog/install-archlinux-on-dell-latitude-e5420.html" rel="alternate"></link><published>2012-03-10T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2012-03-10:blog/install-archlinux-on-dell-latitude-e5420.html</id><summary type="html">&lt;p&gt;Je ne compte pas parler de l’installation d’ArchLinux en lui-même, bien assez de documentation existe sur le sujet.
Je vais me contenter de préciser les parties spécifiques à ce laptop.&lt;/p&gt;
&lt;h1 id="touchpad"&gt;Touchpad&lt;a class="headerlink" href="#touchpad" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Le touchpad n’est pas un touchpad Synaptics, ce qui complique légèrement la configuration, d’autant plus qu’un bug du noyau fait qu’il n’est pas reconnu en tant que touchpad, mais en temps que souris…
Pour l’installer, il faut installer le paquet AUR
&lt;a href="https://aur.archlinux.org/packages.php?ID=51343"&gt;psmouse-elantech&lt;/a&gt;, qui compilera un module du noyau linux permettant de corriger le bug.
Voici la démarche à suivre pour le faire :&lt;/p&gt;
&lt;p&gt;Ensuite, si vous désirez que le module soit automatiquement compilé quand c’est nécessaire (mise à jour…), mettez le dans le rc.conf&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nv"&gt;MODULES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;psmouse-elantech&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ce laptop ne dispose pas de carte graphique, seulement du chipset intégré Intel. Pour le configurer, voici la démarche. Installer le paquet xf86-video-intel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    pacman -S xf86-video-intel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ensuite, il faut modifier les entrée du grub, si vous désirez disposer de toutes les performances du chipset.
Pour ce faire, éditez le fichier /boot/grub/menu.lst (en root), et modifiez le ainsi&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# (0) Arch Linux&lt;/span&gt;
    title Arch Linux
    root &lt;span class="o"&gt;(&lt;/span&gt;hd0,2&lt;span class="o"&gt;)&lt;/span&gt;
    kernel /boot/vmlinuz-linux &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda3 ro i915.modeset&lt;span class="o"&gt;=&lt;/span&gt;1
    initrd /boot/initramfs-linux.img
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;i915.modeset=1 active le module&lt;/li&gt;
&lt;li&gt;i915.modeset=0 désactive le module
&lt;strong&gt;Attention :&lt;/strong&gt; SI vous aviez des entrées vga dans le menu.lst, il faut les enlever !&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="archlinux"></category></entry><entry><title>Configure USB debugging of Android on GNU/Linux</title><link href="http://arntanguy.github.io/blog/configure-usb-debugging-of-android-on-gnulinux.html" rel="alternate"></link><published>2012-02-05T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2012-02-05:blog/configure-usb-debugging-of-android-on-gnulinux.html</id><summary type="html">&lt;p&gt;ShaderMaker's text editor crashed. Indeed, the code tries to load a geometric
shader while this isn't possible. This article provides the necessary source
code to fix this issue. 
disqus_identifier: geenux-usb-debugging-android&lt;/p&gt;
&lt;p&gt;You want to develop your own application and test it directly your phone instead of the virtual machine? Or perhaps you just want to use some cool features of the SDK to manage your phone? Whatever the reason, here is how to do it.&lt;/p&gt;
&lt;p&gt;First, I’ll assume that you have already installed the android SDK.&lt;/p&gt;
&lt;p&gt;The only thing left to do, is to set-up rules for udev. Most articles are happy with giving you a list of devices and Vendor ID. Well, I’m not. These lists are often not exhaustive, and unusual android devices are not represented. There is a really simple way of figuring out this data.
Simply use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    lsusb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will give you a description of all your USB devices, find the one
corresponding to your device&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    Bus 002 Device 004: ID 04e8:689e Samsung Electronics Co., Ltd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the information you need is in this line : the vendor ID is 04e8, and the device id is 689e (this is a Samsung Galaxy Ace).&lt;/p&gt;
&lt;p&gt;You just have to declare it to udev:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    sudo vim /etc/udev/rules.d/51-android.rules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then put a line like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;04e8&amp;quot;&lt;/span&gt;, , ATTRS&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;689e&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously you need to set your own vendor and device ID here.&lt;/p&gt;
&lt;p&gt;You’re all set! Next time udev will restart, your device should work!&lt;/p&gt;</summary><category term="programmation"></category><category term="android"></category><category term="linux"></category></entry><entry><title>Script de téléchargement pour mangareader.net</title><link href="http://arntanguy.github.io/blog/script-de-telechargement-pour-mangareadernet.html" rel="alternate"></link><published>2012-02-05T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2012-02-05:blog/script-de-telechargement-pour-mangareadernet.html</id><summary type="html">&lt;p&gt;J’ai réalisé un petit script python pour télécharger les mangas depuis le site
&lt;a href="http://mangareader.net"&gt;http://mangareader.net&lt;/a&gt;.
Ce script fonctionne pour tous les mangas que j’ai testé, je suppose qu’il fonctionne pour le reste.
Le code est un peu sale, gestion des exceptions pas très rigoureuse (si il y a une erreur durant le téléchargement, pas de souci, vous serez prévenu), appel de fonctions qui pourraient être évités…
Si je suis pas trop flemmard, je modifierai ça plus tard.&lt;/p&gt;
&lt;p&gt;Il n’est probablement pas légal d’utiliser ce script sans être en possession des mangas originaux, pensez à les acheter !&lt;/p&gt;
&lt;p&gt;Le script est sous licence GNU GPL, vous êtes libres de le modifier, l’utiliser comme bon vous semble. Si vous l’améliorez, j’apprécierai d’avoir le nouveau script.&lt;/p&gt;
&lt;p&gt;Utilisation
Tout d’abord, il faut modifier quelques paramètres dans le script pour l’adapter à vos besoin.
La variable DL_DIR contient le répertoire dans lequel vous souhaitez stocker les mangas, adaptez la à vos besoin.&lt;/p&gt;
&lt;p&gt;Pour utiliser le script, il suffit de faire&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    mangareader.py &lt;span class="s2"&gt;&amp;quot;one piece&amp;quot;&lt;/span&gt; 199
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cette commande télécharge le chapitre 199 de One Piece.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    mangareader.py &lt;span class="s2"&gt;&amp;quot;fairy tail&amp;quot;&lt;/span&gt; 1-112
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cette commande télécharge les chapitres de 1 à 112 de Fairy Tail&lt;/p&gt;
&lt;p&gt;Voici donc le script en question:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
    &lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A small script that downloads mangas from onemanga.com&lt;/span&gt;
&lt;span class="sd"&gt;        Licenced under the WTPL Licence&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Gives help about the use of this script&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;Usage:&lt;/span&gt;
&lt;span class="s"&gt;            - python &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot; manga chapter&lt;/span&gt;
&lt;span class="s"&gt;            - python &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot; manga firstchap-lastchap&lt;/span&gt;
&lt;span class="s"&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Config&lt;/span&gt;
    &lt;span class="n"&gt;MAXTRIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;DL_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/media/DATA/Mangas/&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;MANGA_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.mangareader.net/alphabetical&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;MANGA_SITE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.mangareader.net&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;CHAPTER_NUMBER_LENGTH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[31;1m&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[0m&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_sucess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[32;40m&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s"&gt;[0m&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Download the webpage at the given url&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAXTRIES&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed download, retrying...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAXTRIES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maximum tries number reached exiting...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_sucess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Downloaded !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Retrieves a file&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAXTRIES&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MAXTRIES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Maximum tries number reached exiting...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed download, retrying...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print_sucess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nom&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; downloaded.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_pretty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the chain given, in order to have a normal name&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mangareader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Manga class.&lt;/span&gt;
&lt;span class="sd"&gt;        Contains several attributes related to the manga.&lt;/span&gt;
&lt;span class="sd"&gt;        Contains also methods to download its chapters&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;manga&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;manga&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga_p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_pretty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manga&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://mangareader.net/&amp;quot;&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="c"&gt;# Create the download directory&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DL_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DL_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DL_DIR&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga_p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DL_DIR&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga_p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create the download directory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chap_dir_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns the name of the directory of the chapter.&lt;/span&gt;
&lt;span class="sd"&gt;                It is useful in order to organize the mass of chapters.&lt;/span&gt;
&lt;span class="sd"&gt;                example:&lt;/span&gt;
&lt;span class="sd"&gt;                500 chaps in the manga, directory named &amp;quot;001&amp;quot; instead of &amp;quot;1&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHAPTER_NUMBER_LENGTH&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;


        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_chapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Get the images page url list &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Downloading chapter &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chap_dir_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MANGA_SITE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="c"&gt;#print page&lt;/span&gt;
            &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;select&amp;gt; of ([0-9]+).*&amp;lt;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="c"&gt;#print nb_images&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cannot determine the number of images in this chapter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;#&amp;lt;option value=&amp;quot;/103-2057-1/one-piece/chapter-12.html&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;1&amp;lt;/option&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;option value=&amp;quot;(.*)&amp;quot;&amp;gt;(.+)&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;exp2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;option value=&amp;quot;(.*)&amp;quot; selected=&amp;quot;selected&amp;quot;&amp;gt;(.+)&amp;lt;/option&amp;gt;&amp;#39;&lt;/span&gt;

            &lt;span class="c"&gt;# get the link for all pages containing chapter images&lt;/span&gt;
            &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Une page n&amp;#39;a pas été trouvée !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;# remove the problem with the special case of the current image&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;manga_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DL_DIR&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga_p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chap_dir_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manga_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manga_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unable to create the download directory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;manga_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_images&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_images&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;images_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
             &lt;span class="c"&gt;#&amp;lt;img id=&amp;quot;img&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;1210&amp;quot; src=&amp;quot;http://i28.mangareader.net/one-piece/133/one-piece-1690829.jpg&amp;quot; alt=&amp;quot;One Piece 133 - Page 15&amp;quot; name=&amp;quot;img&amp;quot; /&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;lt;img id=.* width=.* height=.* src=&amp;quot;(.*)&amp;quot; alt=.* name=.* /&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;images_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Parsing page &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
                &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MANGA_SITE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Un lien vers une image n&amp;#39;a pas été correctement récupéré!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_images&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Téléchargement de l&amp;#39;image &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nb_images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manga_p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chap_dir_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;print_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Le nombre d&amp;#39;images à télécharger est différent du nombre d&amp;#39;images du chapitre ! Tout ne sera pas téléchargé !&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;-h&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Is there an easter egg in this awesome program ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;     __/~~\-&amp;#39;&amp;#39;- _ |     &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__- - {            \    &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;     /             \    &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;    /       ;o    o }   &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;    |              ;    &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;                   &amp;#39;    &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;       \_       (..)    &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;         &amp;#39;&amp;#39;-_ _ _ /     &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;           /            &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;          /             &amp;quot;&lt;/span&gt;



    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mangareader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;chap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;chap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])):&lt;/span&gt;
                    &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_chapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_chapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="programmation"></category><category term="python"></category><category term="manga"></category><category term="script"></category></entry><entry><title>test gallery</title><link href="http://arntanguy.github.io/blog/test-gallery.html" rel="alternate"></link><published>2012-02-05T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2012-02-05:blog/test-gallery.html</id><summary type="html">&lt;p&gt;You want to develop your own application and test it directly your phone instead of the virtual machine? Or perhaps you just want to use some cool features of the SDK to manage your phone? Whatever the reason, here is how to do it.&lt;/p&gt;
&lt;p&gt;First, I’ll assume that you have already installed the android SDK.&lt;/p&gt;
&lt;p&gt;The only thing left to do, is to set-up rules for udev. Most articles are happy with giving you a list of devices and Vendor ID. Well, I’m not. These lists are often not exhaustive, and unusual android devices are not represented. There is a really simple way of figuring out this data.
Simply use the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    lsusb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will give you a description of all your USB devices, find the one
corresponding to your device&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    Bus 002 Device 004: ID 04e8:689e Samsung Electronics Co., Ltd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the information you need is in this line : the vendor ID is 04e8, and the device id is 689e (this is a Samsung Galaxy Ace).&lt;/p&gt;
&lt;p&gt;You just have to declare it to udev:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    sudo vim /etc/udev/rules.d/51-android.rules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then put a line like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nv"&gt;SUBSYSTEM&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb&amp;quot;&lt;/span&gt;, ATTR&lt;span class="o"&gt;{&lt;/span&gt;idVendor&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;04e8&amp;quot;&lt;/span&gt;, , ATTRS&lt;span class="o"&gt;{&lt;/span&gt;idProduct&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;689e&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0666&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously you need to set your own vendor and device ID here.&lt;/p&gt;
&lt;p&gt;You’re all set! Next time udev will restart, your device should work!&lt;/p&gt;</summary><category term="programmation"></category><category term="android"></category><category term="linux"></category></entry><entry><title>Ripper l'audio d'une vidéo avec FFMPEG.</title><link href="http://arntanguy.github.io/blog/ripper-laudio-dune-video-avec-ffmpeg.html" rel="alternate"></link><published>2011-12-19T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2011-12-19:blog/ripper-laudio-dune-video-avec-ffmpeg.html</id><summary type="html">&lt;p&gt;Bonjour,
Vu que j’ai eu un peu de mal à trouver comment ripper la bande son d’une vidéo (en l’occurence de youtube), j’ai fait un petit script pour le faire simplement :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

    &lt;span class="c"&gt;### libmp3lame required : to install&lt;/span&gt;
    &lt;span class="c"&gt;#sudo apt-get install ffmpeg libavcodec-extra-52&lt;/span&gt;

    &lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="s2"&gt;&amp;quot;$*&amp;quot;&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c"&gt;#mplayer -ao pcm &amp;quot;$i&amp;quot; -ao pcm:file=&amp;quot;$(echo &amp;quot;$i&amp;quot;|cut -d&amp;#39;.&amp;#39; -f1).mp3&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# -vn remove the video&lt;/span&gt;
    ffmpeg -i &lt;span class="s2"&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; -vn -acodec libmp3lame &lt;span class="s2"&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|cut -d&amp;#39;.&amp;#39; -f1).mp3&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Très simple à utiliser, faites juste&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    ripaudio.sh fichier1.flv fichier2.mpeg ...
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="ffmpeg"></category><category term="audio"></category><category term="video"></category><category term="rip"></category></entry><entry><title>Useful usages of dd.</title><link href="http://arntanguy.github.io/blog/useful-usages-of-dd.html" rel="alternate"></link><published>2011-08-13T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2011-08-13:blog/useful-usages-of-dd.html</id><summary type="html">&lt;p&gt;Hello world,
Why bother using heavy and complicated tools to create and use ISO files? Why
not simply consider using the &lt;strong&gt;dd&lt;/strong&gt; command?
Granted, this command can sometimes look quite scary, especially because of
it's impressive potential to destroy data with a misintruction.
Still, it's a very useful command, just be careful how you use it!&lt;/p&gt;
&lt;h1 id="create-an-iso-image-of-a-cd"&gt;Create an ISO image of a CD&lt;a class="headerlink" href="#create-an-iso-image-of-a-cd" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Data within a CD are commonly wrapped in an ISO-9660 filesystem. An ISO image
is merely a copy of this filesystem in a single file.
Seen like that, the solution spawns naturally: we merely neeed to do a bit by
bit copy of the CD into a file...
Who said &lt;strong&gt;dd&lt;/strong&gt; is meant for that?
Just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/cdrom &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cd.iso
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="mount-iso"&gt;Mount ISO&lt;a class="headerlink" href="#mount-iso" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Mountin an ISO can always be useful, so here is how to do it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    sudo mkdir /mnt/iso
    sudo mount -t iso9660 -o loop cd.iso /mnt/iso
    ls /mnt/iso
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="create-bootable-usb-key"&gt;Create bootable USB key&lt;a class="headerlink" href="#create-bootable-usb-key" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Assuming you USB key is on &lt;em&gt;/dev/sdb&lt;/em&gt;, and &lt;strong&gt;isn't mounted&lt;/strong&gt;, you can simply
run the following command to create a bootable USB key.
Note that it is sd&lt;strong&gt;b&lt;/strong&gt; and not sd&lt;strong&gt;b1&lt;/strong&gt;. Indeed, we do want to copy the
bootloader and the partition table as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4M &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bootable_iso.iso &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdb
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="ISO"></category><category term="CD"></category><category term="bash"></category></entry><entry><title>Create Frames For FotoWall</title><link href="http://arntanguy.github.io/blog/create-frames-for-fotowall.html" rel="alternate"></link><published>2010-10-27T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2010-10-27:blog/create-frames-for-fotowall.html</id><summary type="html">&lt;p&gt;This article is a translation of &lt;a href="http://benoit.balon.free.fr/?p=659"&gt;Benoît Bâlon’s article (fr)&lt;/a&gt; concerning the frame creation for Fotowall. I’m translating this article to increase the reach of his work, and meet the ever growing reclamations for more frames.&lt;/p&gt;
&lt;p&gt;The few frames proposed as default in Fotowall aren’t always enough to fill up the user’s creativity. Luckily, this software uses only standards, namely SVG for the frames realisation. Thus, it is rather simple to create new frames, though… two little constraints must be respected  :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drawing an SVG image require the use of a SVG manipulation software, which is not that complicated, but can certainly repel more than one.&lt;/li&gt;
&lt;li&gt;Following a certain amount of indications, once again concerning the SVG, for a perfect display in Fotowall… And there, I lost half my readers (which must represent an arm or a foot)…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before I suggest a solution to avoid these to constraints, and thus make the integration of a "simple drawing" as a frame in Fotowall easier, we will see how these famous frames works.&lt;/p&gt;
&lt;p&gt;As said before, the frames are based on SVG drawings. In order to be used in Fotowall, these are cut in 9 pieces, indentified by a label inside the SVG file. The following illustration represents these 9 pieces, the pink area correspond to the position of a canvas’ photo.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fotowall's Frame Grid" src="http://arntanguy.github.io/blog/images/fotowall/frames/frame_grid.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The labels displayed on each piece, such as "topleft" or "bottom", correspond to the different ID on which Fotowall depends on. Without these ID, Fotowall won’t be able to use the frame, and the outline of the photo, be it of your nephew or of Médor, will desperately remains empty. To these 9 pieces, adds up 4 other elements, represented by arrows above. Although they appear while the vectorial drawing is edited, they are invisible inside Fotowall, but are nonetheless necessary. These, identified by the IDs "hint-[...]-margin", are used to define the width of the visible outline. Thus, if we take the example of the left arrow, here is its impact on the left image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the object "hint-left-margin" is as long as the image "left", then this image appears in its whole width&lt;/li&gt;
&lt;li&gt;If the object "hint-left-margin" is longer than the image "left", then a space appears between this image and the border of the photo. This space is automatically filled with the background image "center", which exceed the photo’s from on the left side.&lt;/li&gt;
&lt;li&gt;If the object "hint-left-margin" is less long than the image "left", then the latter is partially covered with the photo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mathematically, the distance between the space zone and the covered zone, is the difference of length between the element "hint-[...]-margin" and each of the concerned images (the 3 on the left, right, top, bottom): if the frame is 5 pixels and the margin is 10 pixels, there will be a gap of 5 pixels between the frame and the photo.&lt;/p&gt;
&lt;p&gt;A little detail that is worth mentioning, the images "top", "left", "bottom" and "right" will be automatically stretched according to the photo’s size. From here, we realise that unfortunately it’s hard to come up with a frame composed of pattern supporting to be bent… The following example illustrate rather well this problem. Never mind that ! It’s already possible to do enough to have fun, and these few limitations will probably be lifted with time.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The borders being stretched, the patterns are bent" src="http://arntanguy.github.io/blog/images/fotowall/frames/exemple_motif_deforme.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;We saw that a frame is composed of 9 + 4 graphical elements in an SVG file. To avoid entering the IDs of these elements manually inside a SVG file (which is a mere XML structured file), in Inkscape it is possible to enter these after a right click on each of these elements, as illustrated below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Editing in Inkscape" src="http://arntanguy.github.io/blog/images/fotowall/frames/inkscape_property.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;With the information we just studied, we can see that creating a frame can me done without to much difficulty, but is nonetheless a tedious work, which can really become a bother when you try to use more colour schemes for a single frame. And, of course, not everyone is confortable with vectorial drawing!
In this case, why not created a bitmap (JPG, PNG…) frame with an image software such as Gimp, and then convert it in an SVG frame ready to use in Fotowall?&lt;/p&gt;
&lt;p&gt;As we briefly said before, an SVG file is a mere XML file. Luckily enough, there are plenty of linux command line tools, and Bash (or any other *sh, not to be -too- sectarian) is the star when it come to create files automatically!&lt;/p&gt;
&lt;p&gt;The temptation to create such a program was way too high. Thus, here come a
script which will allow us to free ourselves from the cutting and SVG
conversion : &lt;a href="http://benoit.balon.free.fr/wp-content/uploads/fotowall_frame_compiler.zip"&gt;fotowall_frame_compiler.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once uncompressed, the use of this script, though requiring the use of a dark and strange screen, the one we call "Terminal", is really simple to use. Just look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    ./fotwall_frame_compiler.sh image.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script can work with a unique parameter, namely the image to convert. In this case, the 9 frame’s pieces will be as often as possible of equal height and width. For a better rendering, try to prefer dimensions which are multiple of 3 from the begining. In output, the SVG file is created, using the name of the original picture and replacing the extension with ".svg" (which gives in our example image.png &amp;gt; image.svg).&lt;/p&gt;
&lt;p&gt;But we can as well have a frame’s outline as high or wide (or both) different from the one reserved to the photo position. Taking back the example of the first illustration, we clearly see that the height of "top" and "bottom" is not the same as the height of "center". In this case, it will be necessary to know the exact size we want to give to "center" once transformed into SVG. In Gimp, it is for instance possible to measure this sone with the rectangular selection tool. Once the height and width are known, we just have to add these two parameters to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    ./fotowall_frame_compiler.sh image.png 150 130
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script can work with a unique parameter, namely the image to convert. In this case, the 9 frame’s pieces will be as often as possible of equal height and width. For a better rendering, try to prefer dimensions which are multiple of 3 from the begining. In output, the SVG file is created, using the name of the original picture and replacing the extension with ".svg" (which gives in our example image.png &amp;gt; image.svg).&lt;/p&gt;
&lt;p&gt;But we can as well have a frame’s outline as high or wide (or both) different from the one reserved to the photo position. Taking back the example of the first illustration, we clearly see that the height of "top" and "bottom" is not the same as the height of "center". In this case, it will be necessary to know the exact size we want to give to "center" once transformed into SVG. In Gimp, it is for instance possible to measure this sone with the rectangular selection tool. Once the height and width are known, we just have to add these two parameters to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    ./fotowall_frame_compiler.sh image.png 150 130
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first number represents the width in pixels, the second represents the height. Considering that the "center" area is perfectly centred, the script is capable of calculating the width and height of each one of the 9 parts, and to place them within the SVG file. In short, there is nothing left to do, the frame is immediately usable within Fotowall! If the rendering is not perfect (a gap of 1 or 2 pixels is always possible), you just have to play directly on the two values of the command line, and reload the frame in Fotowall.&lt;/p&gt;
&lt;p&gt;To illustrate all of this, here comes a more concrete example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Example of splitting images" src="http://arntanguy.github.io/blog/images/fotowall/frames/exemples_decoupages.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;However, this script requires one or two programs, which are available within the repository of every good GNU/Linux distribution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base64: it should be installed by default, this software can store each of the 9 images directly inside the SVG file.&lt;/li&gt;
&lt;li&gt;ImageMagick : the convert and identify commands are overused in this script. A version 6.5.8-9 at least is required for the automatic splitting in 9 images.&lt;/li&gt;
&lt;li&gt;Inkscape is not really required anymore, but it would be too bad not to use it...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; this script created temporarily 9 PNG images in the directory.
These 9 elements are then stored within the SVG file, after being split and
numbered as follow by ImageMagick (using the example above) : image_0.png,
image_1.png, … , image_8.png. Please mind not having an important picture named
the same, otherwise it will be overwritten. &lt;em&gt;If someone is motivated to create
a proper warning and management of these kind of problems, feel free to do so,
it would be greatly appreciated&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After seeing how the frames works, a script allows us to free ourselves from a certain amount of boring steps (labelling, splitting…), and thus we can concentrate on the pure graphical realisation of the image. Save the images in PNG, as it is the only format to benefit from both colour and transparency.&lt;/p&gt;
&lt;p&gt;By way of conclusion, we can summarise the main parts adressed here concerning the Fotowall’s frames:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are in SVG format, and can be drawn using one of the vectorial manipulation programs, such as Inkscape.&lt;/li&gt;
&lt;li&gt;A frame is composed of 9 elements : the 4 corners, the 4 borders, and the center. To these 9 elements, adds up 4 others for the distance between the border of the frame and the border of the photo.&lt;/li&gt;
&lt;li&gt;Each of the elements is given a precise ID within the SVG file.&lt;/li&gt;
&lt;li&gt;The borders being stretched, the patterns are bent, which for now put a small limitation on your creativity.&lt;/li&gt;
&lt;li&gt;It is possible to avoid all the SVG part, and created a frame from bitmaps (once again, favour the PNG format) using the script fotowall_frame_compiler (needs GNU/Linux and a recent version of ImageMagik).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A huge thanks to &lt;em&gt;Benoît Bâlon&lt;/em&gt; for this article, I hope that my approximative translation didn’t rip too much of the original essence of the article.&lt;/p&gt;</summary><category term="fotowall"></category></entry><entry><title>Créez Vos Mesh Ogre Sous Blender !</title><link href="http://arntanguy.github.io/blog/creez-vos-mesh-ogre-sous-blender.html" rel="alternate"></link><published>2010-03-04T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2010-03-04:blog/creez-vos-mesh-ogre-sous-blender.html</id><summary type="html">&lt;p&gt;Si vous aimez le logiciel de modélisation 3D Blender, vous serez sans doute ravi de l’utiliser pour créer votre monde dans votre jeu utilisant le moteur Ogre.
La bonne nouvelle, c’est que c’est d’une simplicité impressionnante, je vais profiter de ce billet pour me faire un petit mémo sur comment faire, ainsi que comment utiliser la technique de l’UV mapping avec Blender (je débute avec la 3D, que ça soit en programmation ou modélisation).&lt;/p&gt;
&lt;p&gt;L’exemple présenté ici sera fait sur un simple cube, que l’on va texturer, et intégrer dans un projet Ogre.&lt;/p&gt;
&lt;h1 id="installation-du-script-dexportation-ogre-meshes-exporter"&gt;Installation du script d’exportation OGRE Meshes Exporter&lt;a class="headerlink" href="#installation-du-script-dexportation-ogre-meshes-exporter" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="sous-ubuntu"&gt;Sous Ubuntu&lt;a class="headerlink" href="#sous-ubuntu" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Tout d’abord, vous aurez besoin du script d’exportation pour Ogre. Sous Ubuntu pour l’installer, il suffit de faire&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    sudo aptitude install blender-ogrexml
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="sous-une-autre-distribution"&gt;Sous une autre distribution&lt;a class="headerlink" href="#sous-une-autre-distribution" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Si vous avez une autre distribution, voici comment installer le script.&lt;/p&gt;
&lt;p&gt;Téléchargez &lt;a href="http://www.xullum.net/lefthand/downloads/temp/BlenderExport.zip"&gt;OGRE Meshes Exporter&lt;/a&gt;
Copiez ogremeshesexporter.py et les sous-dossiers dans &lt;code&gt;~/.blender/scripts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note : Vous devez aussi avoir python 2.6.4 installé pour que le script fonctionne.&lt;/p&gt;
&lt;h1 id="creation-du-cube-et-uv-mapping"&gt;Création du cube et UV mapping&lt;a class="headerlink" href="#creation-du-cube-et-uv-mapping" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Ouvrez Blender, créez un cube dans une nouvelle scène.&lt;/li&gt;
&lt;li&gt;Déplacez votre curseur sur la limite supérieure de la zone de modélisation jusqu’à voire une double flèche. Clic droit, puis clic gauche sur Split Area, puis clic gauche pour valider.&lt;/li&gt;
&lt;li&gt;Maintenant, dans la nouvelle fenêtre créé, passez en mode UV/ImageEditor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor2.png"&gt;&lt;img alt="Sélection de l'UV
Mapping" src="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retournez dans la vue 3D, passez en mode editing (touche tab), sélectionnez tout le cube&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuite, faites U -&amp;gt; Unwrap (smart projection).
Smart projection est souvent la méthode de déroulement donnant les meilleurs résultats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Faites ensuite Image -&amp;gt; Open (Alt+O) et ouvrez une image de votre choix qui vous servira de texture. Vous pouvez en trouver dans le répertoire OGRE/media/materials/textures…
Une image apparait alors dans la partie de l’UV mapping. Normallement, les vues planes des faces du cubes devraient coincider avec la taille de l’image, si ce n’est pas le cas, sélectionnez toutes les faces dans la partie UV (touche A) puis redimensionnez les en utilisant la touche s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On obtient&lt;/p&gt;
&lt;p&gt;&lt;a href="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor2.png"&gt;&lt;img alt="Dépliage du Cube" src="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor2.png" /&gt;&lt;/a&gt;
&lt;a href="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor3.png"&gt;&lt;img alt="Résultat" src="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/uv_editor3.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allez dans la vue 3D, et faites Alt+Z pour passer en mode texturé. Normalement vous devriez voir la texture.&lt;/li&gt;
&lt;li&gt;Il ne reste plus qu’à assigner un matériau au cube, et à exporter.
Ouvrez le panneau Shading (F5), puis créez un nouveau matériau.
Cliquez sur Tex Face.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="exportation"&gt;Exportation&lt;a class="headerlink" href="#exportation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Faites Fichier-&amp;gt;Exporter-&amp;gt;Ogre Meshes.
Là, vous avez la fenêtre du bas qui se modifie. Cliquez sur « Game Engine Materials » et « OgreXMLConverter ». Le fait de sélectionner OgreXMLConverter appellera automatiquement le programme d’Ogre du même nom qui est chargé de convertir le fichier XML du mesh en des fichiers de mesh que le moteur comprend.
Cliquez sur « Exporter ».&lt;/p&gt;
&lt;p&gt;&lt;a href="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/export.png"&gt;&lt;img alt="Export" src="http://arntanguy.github.io/blog/images/programmation/ogre3d/blender/export.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sublime, magnifique, perfect, vous venez de créer votre premier Mesh pour OGRE. Mais comment l’utiliser maintenant ? Suivez le guide.&lt;/p&gt;
&lt;h1 id="utiliser-le-mesh-dans-ogre"&gt;Utiliser le mesh dans OGRE&lt;a class="headerlink" href="#utiliser-le-mesh-dans-ogre" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Dans cette partie, je supposerai que vous connaissez au moins les bases de OGRE, c’est à dire les premiers tutoriels du wiki officiel, au moins jusqu’à la partie permettant de charger un mesh.&lt;/p&gt;
&lt;p&gt;Tout d’abord, il va falloir placer les fichiers où il faut, c’est à dire… où vous voulez. Je vous conseille néamoins de respecter la structure habituelle de OGRE, c’est à dire&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;un&lt;/span&gt; &lt;span class="n"&gt;dossier&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;lequel&lt;/span&gt; &lt;span class="n"&gt;vous&lt;/span&gt; &lt;span class="n"&gt;placerez&lt;/span&gt; &lt;span class="n"&gt;vos&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;exemple&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;votre&lt;/span&gt; &lt;span class="n"&gt;jeu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="err"&gt;ù&lt;/span&gt; &lt;span class="n"&gt;ailleurs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vous&lt;/span&gt; &lt;span class="n"&gt;placerez&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;ce&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;fichier&lt;/span&gt; &lt;span class="n"&gt;Cube&lt;/span&gt;&lt;span class="mf"&gt;.001&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="n"&gt;qui&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;exportation&lt;/span&gt;
    &lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;materials&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ce&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;contient&lt;/span&gt; &lt;span class="n"&gt;les&lt;/span&gt; &lt;span class="n"&gt;textures&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enfin&lt;/span&gt; &lt;span class="n"&gt;bref&lt;/span&gt; &lt;span class="n"&gt;infos&lt;/span&gt; &lt;span class="n"&gt;sur&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;apparence&lt;/span&gt;
    &lt;span class="err"&gt;———&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;textures&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placez&lt;/span&gt; &lt;span class="n"&gt;ici&lt;/span&gt; &lt;span class="n"&gt;votre&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;
    &lt;span class="err"&gt;———&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placez&lt;/span&gt; &lt;span class="n"&gt;ici&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;fichier&lt;/span&gt; &lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;material&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;exportation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maintenant, il va falloir dire à Ogre où trouver les fichiers. Pour celà, modifiez le fichier ressource.cfg comme suitDans cette partie, je supposerai que vous connaissez au moins les bases de OGRE, c’est à dire les premiers tutoriels du wiki officiel, au moins jusqu’à la partie permettant de charger un mesh.&lt;/p&gt;
&lt;p&gt;Tout d’abord, il va falloir placer les fichiers où il faut, c’est à dire… où vous voulez. Je vous conseille néamoins de respecter la structure habituelle de OGRE, c’est à dire&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Ogre&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;un&lt;/span&gt; &lt;span class="n"&gt;dossier&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;lequel&lt;/span&gt; &lt;span class="n"&gt;vous&lt;/span&gt; &lt;span class="n"&gt;placerez&lt;/span&gt; &lt;span class="n"&gt;vos&lt;/span&gt; &lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;exemple&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;votre&lt;/span&gt; &lt;span class="n"&gt;jeu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="err"&gt;ù&lt;/span&gt; &lt;span class="n"&gt;ailleurs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vous&lt;/span&gt; &lt;span class="n"&gt;placerez&lt;/span&gt; &lt;span class="n"&gt;dans&lt;/span&gt; &lt;span class="n"&gt;ce&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;fichier&lt;/span&gt; &lt;span class="n"&gt;Cube&lt;/span&gt;&lt;span class="mf"&gt;.001&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="n"&gt;qui&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;exportation&lt;/span&gt;
    &lt;span class="err"&gt;—&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;materials&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ce&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;pertoire&lt;/span&gt; &lt;span class="n"&gt;contient&lt;/span&gt; &lt;span class="n"&gt;les&lt;/span&gt; &lt;span class="n"&gt;textures&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enfin&lt;/span&gt; &lt;span class="n"&gt;bref&lt;/span&gt; &lt;span class="n"&gt;infos&lt;/span&gt; &lt;span class="n"&gt;sur&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;apparence&lt;/span&gt;
    &lt;span class="err"&gt;———&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;textures&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placez&lt;/span&gt; &lt;span class="n"&gt;ici&lt;/span&gt; &lt;span class="n"&gt;votre&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;
    &lt;span class="err"&gt;———&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placez&lt;/span&gt; &lt;span class="n"&gt;ici&lt;/span&gt; &lt;span class="n"&gt;le&lt;/span&gt; &lt;span class="n"&gt;fichier&lt;/span&gt; &lt;span class="n"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;material&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt; &lt;span class="n"&gt;par&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;exportation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Maintenant, il va falloir dire à Ogre où trouver les fichiers. Pour celà, modifiez le fichier ressource.cfg comme suit&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# Resources required by the sample browser and most samples.&lt;/span&gt;
    &lt;span class="k"&gt;[Essential]&lt;/span&gt;
    &lt;span class="na"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/share/OGRE/media/packs/SdkTrays.zip&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/thumbnails&lt;/span&gt;

    &lt;span class="c1"&gt;# Common sample resources needed by many of the samples.&lt;/span&gt;
    &lt;span class="c1"&gt;# Rarely used resources should be separately loaded by the&lt;/span&gt;
    &lt;span class="c1"&gt;# samples which require them.&lt;/span&gt;
    &lt;span class="k"&gt;[Popular]&lt;/span&gt;
    &lt;span class="na"&gt;FileSystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/share/OGRE/media/fonts&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/materials/programs&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/materials/scripts&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/materials/textures&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/materials/textures/nvidia&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/models&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/particle&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/DeferredShadingMedia&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/PCZAppMedia&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/usr/share/OGRE/media/RTShaderLib&lt;/span&gt;

    &lt;span class="c1"&gt;# MODIFIEZ ICI : mettez le chemin des répertoires que vous venez de créer&lt;/span&gt;
    &lt;span class="na"&gt;FileSystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/media/data/programmation/3D/ogre/media/materials/scripts&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/media/data/programmation/3D/ogre/media/materials/textures&lt;/span&gt;
&lt;span class="s"&gt;    FileSystem=/media/data/programmation/3D/ogre/media/models&lt;/span&gt;

    &lt;span class="na"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/share/OGRE/media/packs/cubemap.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/cubemapsJS.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/dragon.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/fresneldemo.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/ogretestmap.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/ogredance.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/Sinbad.zip&lt;/span&gt;
&lt;span class="s"&gt;    Zip=/usr/share/OGRE/media/packs/skybox.zip&lt;/span&gt;

    &lt;span class="k"&gt;[General]&lt;/span&gt;
    &lt;span class="na"&gt;FileSystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/share/OGRE/media&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Plus qu’à tester ça sur un exemple, prenons celui du wiki officiel :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ExampleApplication.h&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TutorialApplication&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ExampleApplication&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;protected:&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;TutorialApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;TutorialApplication&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;protected:&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;createScene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mSceneMgr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;setAmbientLight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ColourValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ent1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mSceneMgr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Cube.001.mesh&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;SceneNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;node1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mSceneMgr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;getRootSceneNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;createChildSceneNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;TestNode&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;node1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;attachObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ent1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;OGRE_PLATFORM&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OGRE_PLATFORM_WIN32&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;WIN32_LEAN_AND_MEAN&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;windows.h&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;WINAPI&lt;/span&gt; &lt;span class="n"&gt;WinMain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;HINSTANCE&lt;/span&gt; &lt;span class="n"&gt;hInst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HINSTANCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LPSTR&lt;/span&gt; &lt;span class="n"&gt;strCmdLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INT&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create application object&lt;/span&gt;
        &lt;span class="n"&gt;TutorialApplication&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;OGRE_PLATFORM&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;OGRE_PLATFORM_WIN32&lt;/span&gt;
            &lt;span class="n"&gt;MessageBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;An exception has occurred!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MB_OK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MB_ICONERROR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MB_TASKMODAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;An exception has occurred: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;what&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voilà, plus qu’à compiler, et à lancer le programme. Normallement, sous vos yeux ébahis, le cube apparait, texturé tout comme il faut.&lt;/p&gt;
&lt;h1 id="problemes"&gt;Problèmes&lt;a class="headerlink" href="#problemes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Voici quelques problèmes que j’ai rencontré, et comment les éviter :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si l’application ne démarre pas, vous avez probablement oublié de placer le fichier mesh Cube.001.mesh dans votre répertoire models/, ou alors vous n’avez pas spécifié correctement sa position dans le fichier ressources.cfg&lt;/li&gt;
&lt;li&gt;Si le cube n’est pas texturé, vérifiez que vous avez bien un fichier Scene.material dans votre dossier script, et que son emplacement est correctement spécifié dans le fichier ressources.cfg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Amusez vous bien, et si je n’ai pas été clair, n’hésitez pas à demander des précisions dans les commentaires.&lt;/p&gt;</summary><category term="blender"></category><category term="ogre3D"></category><category term="3D"></category></entry><entry><title>Using CMake</title><link href="http://arntanguy.github.io/blog/using-cmake.html" rel="alternate"></link><published>2009-12-27T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-12-27:blog/using-cmake.html</id><summary type="html">&lt;p&gt;Je me souviens encore des premier projets pour lesquels j’ai tenté de comprendre comment utiliser cmake pour créer les makefiles.  La doc est tout sauf claire, et le manque de tutoriels sur la base du fonctionnement de cmake manque cruellement. Je vais tâcher de remédier à ce souci, en expliquant comment compiler des projets simples avec cmake.&lt;/p&gt;
&lt;h1 id="quest-ce-que-cmake"&gt;Qu’est-ce que cmake ?&lt;a class="headerlink" href="#quest-ce-que-cmake" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Il s’agit d’un outil permettant de ne pas avoir à écrire les Makefiles à la main. Il permet de rechercher automatiquement les librairies sur le systèmes, de régler les compilation en statique ou dynamique, de compiler aisément à partir d’un dossier séparé. C’est un réel plus pour la portabilité (cmake fonctionne sur de nombreux systèmes, et la plupart des modules peuvent trouver les lib aussi bien sous Windows, que GNU/Linux…).&lt;/p&gt;
&lt;p&gt;Cmake permet de vous affranchir de la syntaxe immonde des makefiles, et de vous contenter de décrire la manière de compilation de votre programme, de conditionner la compilation…&lt;/p&gt;
&lt;h1 id="un-cmake-minimal"&gt;Un cmake minimal.&lt;a class="headerlink" href="#un-cmake-minimal" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tout d’abord, voici un exemple de CMakeFile.txt (c’est le fichier que cmake lit pour le convertir en makefile) permettant de compiler avec Boost.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;VERSION&lt;/span&gt; &lt;span class="s"&gt;2.6&lt;/span&gt; &lt;span class="s"&gt;FATAL_ERROR&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# search for Boost version 1.40&lt;/span&gt;
    &lt;span class="c"&gt;# Components :&lt;/span&gt;
    &lt;span class="c"&gt;#filesystem, iostreams, programoptions, python, regex, serialization, signals&lt;/span&gt;
    &lt;span class="c"&gt;#system, thread, wave&lt;/span&gt;
    &lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;Boost&lt;/span&gt; &lt;span class="s"&gt;1.40.0&lt;/span&gt; &lt;span class="s"&gt;COMPONENTS&lt;/span&gt; &lt;span class="s"&gt;regex&lt;/span&gt; &lt;span class="s"&gt;signals&lt;/span&gt; &lt;span class="s"&gt;FATAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;link_directories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_LIBRARY_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;SOURCES&lt;/span&gt;
    &lt;span class="s"&gt;main.cpp&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;EXECUTABLE_NAME&lt;/span&gt;
    &lt;span class="s"&gt;executable&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;add_executable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EXECUTABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;target_link_libraries&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EXECUTABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_LIBRARIES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comme vous pouvez le constater dans cet exemple, cmake gère les variables, et sa syntaxe est assez simple. Étudions plus en détail ce fichier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;cmake_minimum_required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;VERSION&lt;/span&gt; &lt;span class="s"&gt;2.6&lt;/span&gt; &lt;span class="s"&gt;FATAL_ERROR&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cette ligne indique qu’il faut avoir la version 2.6 de cmake pour compiler, le FATAL_ERROR est facultatif, il indique à cmake de ne pas essayer de compiler et de stopper tout de suite.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;Boost&lt;/span&gt; &lt;span class="s"&gt;1.40.0&lt;/span&gt; &lt;span class="s"&gt;COMPONENTS&lt;/span&gt; &lt;span class="s"&gt;regex&lt;/span&gt; &lt;span class="s"&gt;signals&lt;/span&gt; &lt;span class="s"&gt;FATAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Il s’agit d’une des fonctionnalités les plus intéressantes de cmake : la recherche des librairies. La fonctionnalité find_package va chercher un fichier (appelé module), permettant de rechercher la lib voulue nommée FindBoost.cmake. Chez moi ce fichier est dans "/usr/share/cmake-2.6/Modules/FindBoost.cmake".
(si vous ne le trouvez pas, un simple &lt;code&gt;locate FindBoost.cmake&lt;/code&gt; devrait le trouver).
Pourquoi je vous indique ces détails sur le fichier ? Eh bien, parceque la lecture du fichier en question va vous fournir une mine d’information sur ce qu’il fait, quelles variables il définit, bref comment l’exploiter.
Voici quelques extraits du header de ce fichier :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# - Try to find Boost include dirs and libraries&lt;/span&gt;
    &lt;span class="c"&gt;# Usage of this module as follows:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# == Using Header-Only libraries from within Boost: ==&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   find_package( Boost 1.36.0 )&lt;/span&gt;
    &lt;span class="c"&gt;#   if(Boost_FOUND)&lt;/span&gt;
    &lt;span class="c"&gt;#      include_directories(${Boost_INCLUDE_DIRS})&lt;/span&gt;
    &lt;span class="c"&gt;#      add_executable(foo foo.cc)&lt;/span&gt;
    &lt;span class="c"&gt;#   endif()&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# == Using actual libraries from within Boost: ==&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   set(Boost_USE_STATIC_LIBS   ON)&lt;/span&gt;
    &lt;span class="c"&gt;#   set(Boost_USE_MULTITHREADED ON)&lt;/span&gt;
    &lt;span class="c"&gt;#   find_package( Boost 1.36.0 COMPONENTS date_time filesystem system ... )&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   if(Boost_FOUND)&lt;/span&gt;
    &lt;span class="c"&gt;#      include_directories(${Boost_INCLUDE_DIRS})&lt;/span&gt;
    &lt;span class="c"&gt;#      add_executable(foo foo.cc)&lt;/span&gt;
    &lt;span class="c"&gt;#      target_link_libraries(foo ${Boost_LIBRARIES})&lt;/span&gt;
    &lt;span class="c"&gt;#   endif()&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# The components list needs to contain actual names of boost libraries only,&lt;/span&gt;
    &lt;span class="c"&gt;# such as &amp;quot;date_time&amp;quot; for &amp;quot;libboost_date_time&amp;quot;.  If you&amp;#39;re using parts of&lt;/span&gt;
    &lt;span class="c"&gt;# Boost that contain header files only (e.g. foreach) you do not need to&lt;/span&gt;
    &lt;span class="c"&gt;# specify COMPONENTS.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# You should provide a minimum version number that should be used. If you provide this&lt;/span&gt;
    &lt;span class="c"&gt;# version number and specify the REQUIRED attribute, this module will fail if it&lt;/span&gt;
    &lt;span class="c"&gt;# can&amp;#39;t find the specified or a later version. If you specify a version number this is&lt;/span&gt;
    &lt;span class="c"&gt;# automatically put into the considered list of version numbers and thus doesn&amp;#39;t need&lt;/span&gt;
    &lt;span class="c"&gt;# to be specified in the Boost_ADDITIONAL_VERSIONS variable (see below).&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# NOTE for Visual Studio Users:&lt;/span&gt;
    &lt;span class="c"&gt;#     Automatic linking is used on MSVC &amp;amp;amp; Borland compilers by default when&lt;/span&gt;
    &lt;span class="c"&gt;#     #including things in Boost.  It&amp;#39;s important to note that setting&lt;/span&gt;
    &lt;span class="c"&gt;#     Boost_USE_STATIC_LIBS to OFF is NOT enough to get you dynamic linking,&lt;/span&gt;
    &lt;span class="c"&gt;#     should you need this feature.  Automatic linking typically uses static&lt;/span&gt;
    &lt;span class="c"&gt;#     libraries with a few exceptions (Boost.Python is one).&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#     Please see the section below near Boost_LIB_DIAGNOSTIC_DEFINITIONS for&lt;/span&gt;
    &lt;span class="c"&gt;#     more details.  Adding a TARGET_LINK_LIBRARIES() as shown in the example&lt;/span&gt;
    &lt;span class="c"&gt;#     above appears to cause VS to link dynamically if Boost_USE_STATIC_LIBS&lt;/span&gt;
    &lt;span class="c"&gt;#     gets set to OFF.  It is suggested you avoid automatic linking since it&lt;/span&gt;
    &lt;span class="c"&gt;#     will make your application less portable.&lt;/span&gt;
    &lt;span class="err"&gt;[...]&lt;/span&gt;
    &lt;span class="c"&gt;# Variables used by this module, they can change the default behaviour and&lt;/span&gt;
    &lt;span class="c"&gt;# need to be set before calling find_package:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_USE_MULTITHREADED      Can be set to OFF to use the non-multithreaded&lt;/span&gt;
    &lt;span class="c"&gt;#                                boost libraries.  If not specified, defaults&lt;/span&gt;
    &lt;span class="c"&gt;#                                to ON.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_USE_STATIC_LIBS        Can be set to ON to force the use of the static&lt;/span&gt;
    &lt;span class="c"&gt;#                                boost libraries. Defaults to OFF.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;# Other Variables used by this module which you may want to set.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_ADDITIONAL_VERSIONS    A list of version numbers to use for searching&lt;/span&gt;
    &lt;span class="c"&gt;#                                the boost include directory.  Please see&lt;/span&gt;
    &lt;span class="c"&gt;#                                the documentation above regarding this&lt;/span&gt;
    &lt;span class="c"&gt;#                                annoying, but necessary variable &amp;lt;img src=&amp;quot;http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif?m=1129645325g&amp;quot; alt=&amp;quot;:(&amp;quot; class=&amp;quot;wp-smiley&amp;quot;&amp;gt; &lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="err"&gt;[...]&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_INCLUDE_DIRS                  Boost include directories: not cached&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_INCLUDE_DIR                   This is almost the same as above, but this one is&lt;/span&gt;
    &lt;span class="c"&gt;#                                       cached and may be modified by advanced users&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_LIBRARIES                     Link to these to use the Boost libraries that you&lt;/span&gt;
    &lt;span class="c"&gt;#                                       specified: not cached&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_LIBRARY_DIRS                  The path to where the Boost library files are.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_VERSION                       The version number of the boost libraries that&lt;/span&gt;
    &lt;span class="c"&gt;#                                       have been found, same as in version.hpp from Boost&lt;/span&gt;
    &lt;span class="err"&gt;[...]&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_${COMPONENT}_FOUND            True IF the Boost library &amp;quot;component&amp;quot; was found.&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;
    &lt;span class="c"&gt;#   Boost_${COMPONENT}_LIBRARY          Contains the libraries for the specified Boost&lt;/span&gt;
    &lt;span class="c"&gt;#                                       &amp;quot;component&amp;quot; (includes debug and optimized keywords&lt;/span&gt;
    &lt;span class="c"&gt;#                                       when needed).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grâce aux informations contenues ici, on pourra facilement construite un CMakeFile adapté à nos besoins.
Revenons à l’exemple :
find_package va utiliser le fichier indiqué plus haut pour rechercher boost, le module va définir de nombreuses variable (comme on voit dans le header ci-dessus), que l’on va utiliser pour la compilation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;find_package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;Boost&lt;/span&gt; &lt;span class="s"&gt;1.40.0&lt;/span&gt; &lt;span class="s"&gt;COMPONENTS&lt;/span&gt; &lt;span class="s"&gt;regex&lt;/span&gt; &lt;span class="s"&gt;signals&lt;/span&gt; &lt;span class="s"&gt;FATAL_ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;link_directories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_LIBRARY_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;include_directories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_INCLUDE_DIRS&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;k&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;La ligne link_directories indique que cmake devra lier l’exécutable avec la librairie boost, ${Boost_LIBRARY_DIRS} étant une variable définie par le module appelé par find_package.
La ligne include_directories fait de même pour le répertoire dans lequel les includes de boost sont.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;SOURCES&lt;/span&gt; &lt;span class="s"&gt;main.cpp&lt;/span&gt; &lt;span class="s"&gt;autre.cpp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;SET&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;EXECUTABLE_NAME&lt;/span&gt; &lt;span class="s"&gt;executable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On définit 2 variables SOURCES et EXECUTABLE_NAME, comme ça on aura juste à modifier à un seul endroit, et tout le reste sera modifié en conséquence.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nb"&gt;add_executable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EXECUTABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SOURCES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;target_link_libraries&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;EXECUTABLE_NAME&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;Boost_LIBRARIES&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add_executable indique à cmake qu’il faut compiler les sources contenues dans la variable SOURCE et créer un exécutable nommé par le nom défini dans la variable EXECUTABLE_NAME
target_link_libraries indique à cmake avec quelles librairies il doit lier.&lt;/p&gt;
&lt;p&gt;Et voilà, vous avez un CMakeList pour compiler avec boost.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    mkdir build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;build
    cmake ..
    make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et voilà, les sources sont compilés dans le dossier build.&lt;/p&gt;</summary><category term="fotowall"></category></entry><entry><title>FotoWall 0.9</title><link href="http://arntanguy.github.io/blog/fotowall-09.html" rel="alternate"></link><published>2009-12-23T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-12-23:blog/fotowall-09.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Fotowall 0.9&lt;/strong&gt; est enfin sorti ! Pour ceux qui ne le saurait pas encore, Fotowall
permet de créer un "patchwork" de photos (les assembler, ajouter des effets, cadres…)&lt;/p&gt;
&lt;h2 id="nouveautes"&gt;Nouveautés&lt;a class="headerlink" href="#nouveautes" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Un espace de travail simple, robuste et intégré avec un écran d’accueil.&lt;/li&gt;
&lt;li&gt;Nouveaux contenus : Canevas et "Nuage de mots" [Wordcloud]&lt;/li&gt;
&lt;li&gt;Effets graphiques&lt;/li&gt;
&lt;li&gt;Système de commentaires [Likeback]&lt;/li&gt;
&lt;li&gt;Canvevas zommable, avec des barres de défilement (enfin)&lt;/li&gt;
&lt;li&gt;Plus de 250 autres changements:&lt;ul&gt;
&lt;li&gt;Autoblend Effect for images&lt;/li&gt;
&lt;li&gt;SVG export&lt;/li&gt;
&lt;li&gt;Quick and improved property editors&lt;/li&gt;
&lt;li&gt;Cursor key movement&lt;/li&gt;
&lt;li&gt;OpenGL performance tests and auto-tuning&lt;/li&gt;
&lt;li&gt;Google Images search (by Marco Bavagnoli, reqby. Rossana)&lt;/li&gt;
&lt;li&gt;Cleanups and Refactors: Selection, Frames, Rendering, Backgrounding, DVD/CD, Print/Export&lt;/li&gt;
&lt;li&gt;Fixed relative saving (with contents auto-search)&lt;/li&gt;
&lt;li&gt;Fixed multiple Webcams and bad Colors&lt;/li&gt;
&lt;li&gt;Fixed the Exact Size modes&lt;/li&gt;
&lt;li&gt;Fixed licensing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour le télécharger, c’est &lt;a href="http://enricoros.com/opensource/fotowall"&gt;&lt;strong&gt;par ici&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Fotowall 0.9 - Fenêtre principale" src="http://arntanguy.github.io/blog/images/fotowall/fotowall0.9/fotowall0.9.png" /&gt;
&lt;img alt="Fotowall 0.9 - Canvas Zoomable" src="http://arntanguy.github.io/blog/images/fotowall/fotowall0.9/fotowall0.9_zoomable.png" /&gt;&lt;/p&gt;</summary><category term="fotowall"></category></entry><entry><title>Psp SLIM 200 Chicken &amp; Custom Firmware Gen B</title><link href="http://arntanguy.github.io/blog/psp-slim-200-chicken-custom-firmware-gen-b.html" rel="alternate"></link><published>2009-12-23T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-12-23:blog/psp-slim-200-chicken-custom-firmware-gen-b.html</id><summary type="html">&lt;p&gt;J’ai pas mal galéré pour avoir ma PSP Slim 2000 fonctionnelle avec un custom firmware pour pouvoir lancer des homebrew (applications non officielles), notamment bookr permettant de lire des pdf.&lt;/p&gt;
&lt;h1 id="installer-chickhen-r2"&gt;Installer chickhen r2&lt;a class="headerlink" href="#installer-chickhen-r2" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Tout d’abord, qu’est-ce que chickhen ? Il s’agit d’un hack exploitant une faille de la lib tiff de la psp pour permettre le lancement d’homebrew. Une fois chickhen "installé", une bonne partie des homebrews pourront être lancés. Il n’y a aucun risque pour la psp à installer chicken, en effet celui-ci n’est pas réellement installé, la mémoire flash de la psp n’est pas modifié. Chickhen est seulement chargé en mémoire, ce qui signifie que si vous éteignez totalement la psp (en maintenant le bouton off quelques secondes), il faudra le réinstaller, heureusement, cette étape est très simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Téléchargez &lt;a href="http://geenux.free.fr/downloads/Chickhen.zip"&gt;Chickhen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Placer le dossier Chickhen dans le dossier PSP/PHOTO&lt;/li&gt;
&lt;li&gt;Placer le fichier h.bin à la racine de votre PSP&lt;/li&gt;
&lt;li&gt;Débrancher la psp, mettez l’adaptateur wlan sur on (ça ne fonctionne pas sinon, en tout cas avec ma psp), assurez vosu que le son n’est pas coupé, puis allez dans le menu Photo-&amp;gt;memory stick, et faites croix sur le dossier Chickhen. Là, ne touchez plus à rien, ne scrollez pas, attendez quelques secondes. Il y aura un écran vert qui va apparaître, et la psp va redémarrer. Il se peut que ça ne fonctionne pas si la psp est en français, si c’est le cas, mettez la en anglais (ce que j’ai fait).&lt;/li&gt;
&lt;li&gt;Vérifiez que c’est bien installé, en allant dans le menu Settings-&amp;gt;System Information, vous devriez voir 5.03 ChickHEN R2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Là, normalement la plupart des &lt;em&gt;homebrews&lt;/em&gt; devraient se lancer, mais ça serait dommage de s’arrêter en si bon chemin.&lt;/p&gt;
&lt;h1 id="installer-le-custom-firmware-503-gen-b"&gt;Installer le custom firmware 5.03 gen B&lt;a class="headerlink" href="#installer-le-custom-firmware-503-gen-b" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Il s’agit d’un hack du système d’exploitation de la PSP pour lui ajouter des fonctionnalités et débloquer des choses délibérément bloquées par la psp (pour éviter le piratage des jeux par exemple). Il permettra de lancer les homebrews, les jeux au format iso, cso, boot…&lt;/p&gt;
&lt;p&gt;Vous pouvez convertir vos UMD en iso sur votre PSP grâce à ce firmware. Quel intérêt ? Temps de chargement plus rapide, consommation de batterie plus faible, vos UMD ne sont pas abimés.&lt;/p&gt;
&lt;p&gt;L’installation est expliquée assez clairement sur
&lt;a href="http://www.pspgen.com/custom-firmware-5-03gen-b-for-hen-psp-3000-telechargement-190694.html"&gt;pspgen&lt;/a&gt;, je ne vais donc pas le refaire ici.&lt;/p&gt;
&lt;h1 id="informations-complementaires-sur-lutilisation"&gt;Informations complémentaires sur l’utilisation.&lt;a class="headerlink" href="#informations-complementaires-sur-lutilisation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Vous pouvez accéder au recovery menu, ainsi qu’au gen vsh menu, permettant de configurer la psp en appuyant sur la touche Select.&lt;/p&gt;
&lt;p&gt;Si vous désirez lancer des jeux en iso, il est conseillé de mettre UMS ISO MODE sur Sony NP9960. Si votre iso ne foncitonne pas, essayez M33 driver.&lt;/p&gt;
&lt;p&gt;J’espère que ce billet permettra d’éclaircir l’installation du custom firmware. Pour l’installer, j’ai été obligé de faire de nombreuses recherches, sur de nombreux sites/forum, alors que c’est extrêmement simple et sur (j’avais peur de bricker ma psp, et il m’a fallu voir plusieurs sites pour être convaincu que le flash0 n’était pas touché).&lt;/p&gt;</summary><category term="psp"></category></entry><entry><title>VIM : My configuration</title><link href="http://arntanguy.github.io/blog/vim-my-configuration.html" rel="alternate"></link><published>2009-12-23T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-12-23:blog/vim-my-configuration.html</id><summary type="html">&lt;p&gt;Tant qu’à m’être fait un vim qui me convient à peu près, je me suis dit que ça
pourrait être bien de partager ça. J’utilise un gestionnaire de version (git)
pour suivre l’évolution de ma configuration, le dépôt contenant le tout est
disponible sur &lt;a href="http://github.com/geenux/vim_config/"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Actuellement ma configuration permet :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De programmer en c++ : Alternate (:A) pour passer des .cpp aux .h, Surround pour gérer les parenthèses, matchit pour étendre la commande "%" (permettant de passer de la parenthèse ouvrante à la fermante) à plus d’éléments (balises xml…), NerdCommenter pour gérer les commentaires, DoxygenToolKit pour gérer la documentation. Et le plugin le plus important : OmniCppComplete qui permet de compléter le code plus intelligemment que Ctrl+N (notemment en utilisant les fichiers tags, que j’ai réalisé pour Qt et boost sur mon ordi).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De faire de latex : la latex-suite est installée.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il y a d’autres plugins intéressant, comme Arpeggio par exemple. Arpeggio permet d’utiliser des raccourcis en pressant simultanément plusieurs touches.
Par exemple, en ajoutant la ligne suivante dans le .vimrc
call arpeggio#map('i', '', 0, 'jk', '')
Ça créé un raccourcis en mode insertion, de sorte que "jk" pressés simultanément sortent du mode insertion, et que "j" et "k" pressés séparément aient toujours le même effet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si vous décidez d’utiliser ma configuration, téléchargez là à l’adresse indiquée plus haut, puis placez le contenu du dossier dans ~/.vim. Ensuite, déplacez le vimrc dans ~/.vimrc et gvimrc dans ~/.gvimrc.&lt;/p&gt;
&lt;p&gt;J’ai rédigé un mini aide mémoire pour moi, faites dans vim &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    :&lt;span class="k"&gt;h&lt;/span&gt; arnaud
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    &lt;em&gt;arnaud.txt&lt;/em&gt;    Arnaud Vim Config          2009-06-21&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;Author:&lt;/span&gt;  &lt;span class="n"&gt;TANGUY&lt;/span&gt; &lt;span class="n"&gt;Arnaud&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;arn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tanguy&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;Copyright:&lt;/span&gt; &lt;span class="err"&gt;©&lt;/span&gt; &lt;span class="n"&gt;Copyright&lt;/span&gt; &lt;span class="mi"&gt;2009&lt;/span&gt; &lt;span class="n"&gt;TANGUY&lt;/span&gt; &lt;span class="n"&gt;Arnaud&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;Rights&lt;/span&gt; &lt;span class="n"&gt;Reserved&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Licence&lt;/span&gt; &lt;span class="n"&gt;GNU&lt;/span&gt;
&lt;span class="n"&gt;GPL&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;==============================================================================&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Contents&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arnaud&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arnaud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="p"&gt;.................................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;arnaud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mappings&lt;/span&gt;&lt;span class="p"&gt;.............................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Plugins&lt;/span&gt;&lt;span class="p"&gt;..................................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;OmniCppComplete&lt;/span&gt;&lt;span class="p"&gt;........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;omnicppcomplete&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;................................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;SearchInRuntime&lt;/span&gt;&lt;span class="p"&gt;........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;searchinruntime&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Surround&lt;/span&gt;&lt;span class="p"&gt;...............................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;surround&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Alternate&lt;/span&gt;&lt;span class="p"&gt;..............................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;ManPageView&lt;/span&gt;&lt;span class="p"&gt;............................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manpageview&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Matchit&lt;/span&gt;&lt;span class="p"&gt;................................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;matchit&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;NERD_Commenter&lt;/span&gt;&lt;span class="p"&gt;.........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nerdcommenter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;PhpDocumentor&lt;/span&gt;&lt;span class="p"&gt;..........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;phpdocumentor&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;DoxygenToolkit&lt;/span&gt;&lt;span class="p"&gt;.........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;doxygen&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;...............................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
         &lt;span class="n"&gt;Indent&lt;/span&gt; &lt;span class="n"&gt;Guides&lt;/span&gt;&lt;span class="p"&gt;..........................&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;guides&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

&lt;span class="o"&gt;==============================================================================&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;mappings&lt;/span&gt;                         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
       &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;      &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F6&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;SearchInVar&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F7&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;SearchInVar&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;tab&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;Ctags&lt;/span&gt; &lt;span class="n"&gt;rebuild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="n"&gt;modes&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;F9&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;ftplugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;
                &lt;span class="n"&gt;mapped&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;    &lt;span class="n"&gt;Generate&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;
               &lt;span class="n"&gt;ftplugins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Plugins&lt;/span&gt;                  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;OMNICPPCOMPLETE&lt;/span&gt;                             &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;omnicppcomplete&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Omnicppcomplete&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;completition&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;completes&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maily&lt;/span&gt;
    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;ctags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;
    &lt;span class="nl"&gt;with:&lt;/span&gt;
    &lt;span class="n"&gt;ctags&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++-&lt;/span&gt;&lt;span class="n"&gt;kinds&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="n"&gt;iaS&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="o"&gt;=+&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Then&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;autocompletition&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;automatically&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;omnicppcomplete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;PROJECT&lt;/span&gt;                                   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;managment&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;allows&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
    &lt;span class="n"&gt;structures&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;easily&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;creates&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;saves&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;SPACE&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;SEARCHINRUNTIME&lt;/span&gt;                     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;searchinruntime&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SIR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Search&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;searchInRuntime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;SURROUND&lt;/span&gt;                             &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;surround&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;surround&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;caracters&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="p"&gt;{,(,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;...&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;(}&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="p"&gt;(...)&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;surround&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_Hello dear friends&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ys2w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;give&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[ Hello dear ] friends&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Visual&lt;/span&gt; &lt;span class="n"&gt;selection&lt;/span&gt; &lt;span class="n"&gt;surrounding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;press&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Press&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;
    &lt;span class="n"&gt;surrounding&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;surround&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;ALTERNATE&lt;/span&gt;                               &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Switch&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="n"&gt;hpp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

    &lt;span class="n"&gt;MANPAGEVIEW&lt;/span&gt;                             &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;manpageview&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;man&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;unixes&lt;/span&gt; &lt;span class="n"&gt;man&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;

    &lt;span class="n"&gt;MATCHIT&lt;/span&gt;                                 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;matchit&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;allows&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt;
    &lt;span class="n"&gt;single&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="n"&gt;regular&lt;/span&gt;
    &lt;span class="n"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Also&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matching&lt;/span&gt; &lt;span class="n"&gt;treats&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;recognized&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
    &lt;span class="n"&gt;syntax&lt;/span&gt; &lt;span class="n"&gt;highlighting&lt;/span&gt; &lt;span class="n"&gt;mechanism&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;intelligently&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;ftplugins&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;several&lt;/span&gt; &lt;span class="n"&gt;languages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Ada&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ASP&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VBS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Csh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DTD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Essbase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fortran&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSP&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;LaTeX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Lua&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pascal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SGML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Shell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tcsh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;explains&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;configure&lt;/span&gt;
    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;modify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;matchit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;NERDCOMMENTER&lt;/span&gt;                      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nerd&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nerdcommenter&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Nerd&lt;/span&gt; &lt;span class="n"&gt;commenter&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;according&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;useful&lt;/span&gt; &lt;span class="n"&gt;mappings&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;visual&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cy&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;yank&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;commenting&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cl&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComAlignedComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Same&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;delimiters&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;aligned&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="p"&gt;(,&lt;/span&gt;&lt;span class="n"&gt;cl&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="p"&gt;(,&lt;/span&gt;&lt;span class="n"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;both&lt;/span&gt; &lt;span class="n"&gt;sides&lt;/span&gt;
    &lt;span class="p"&gt;(,&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cI&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComPrependComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cA&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComAppendComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Adds&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;delimiters&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt;
    &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;  &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComToggleComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Toggles&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;topmost&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;commented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;uncommented&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;vice&lt;/span&gt; &lt;span class="n"&gt;versa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cu&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComUncommentLine&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Uncomments&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComMinimalComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;multipart&lt;/span&gt; &lt;span class="n"&gt;delimiters&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
    &lt;span class="n"&gt;possible&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComInvertComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Toggles&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;individually&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Each&lt;/span&gt;
    &lt;span class="n"&gt;selected&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;commented&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;uncommented&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;vice&lt;/span&gt; &lt;span class="n"&gt;versa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComSexyComment&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;Comments&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="err"&gt;``&lt;/span&gt;&lt;span class="n"&gt;sexily&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Useful&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ca&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDComAltDelim&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="cm"&gt;/*Switches to the alternative set of delimiters.*/&lt;/span&gt;

    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;NERDCommenter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;PHPDOCUMENTOR&lt;/span&gt;                                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;phpdocumentor&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;phpd&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;PhpDocumentor&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;generating&lt;/span&gt; &lt;span class="n"&gt;phpDocumentor&lt;/span&gt; &lt;span class="n"&gt;documentation&lt;/span&gt;
    &lt;span class="n"&gt;blocs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;every&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="n"&gt;DOXYGEN&lt;/span&gt;                                                 &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;doxygen&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;autocreatin&lt;/span&gt; &lt;span class="n"&gt;doxygen&lt;/span&gt; &lt;span class="n"&gt;commenting&lt;/span&gt; &lt;span class="n"&gt;blocs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="n"&gt;Move&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;declaration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Dox&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.vim.org/scripts/script.php?script_id=987 for more details&lt;/span&gt;
    &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;

    &lt;span class="n"&gt;MARKDOWN&lt;/span&gt;                                     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nl"&gt;Mappings:&lt;/span&gt;
    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;visual&lt;/span&gt; &lt;span class="n"&gt;modes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;sibling&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;sibling&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Current&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;INDENT&lt;/span&gt; &lt;span class="n"&gt;GUIDES&lt;/span&gt;                               &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;guides&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{{{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Activate&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Leader&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ig&lt;/span&gt;   &lt;span class="p"&gt;(,&lt;/span&gt;&lt;span class="n"&gt;ig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;/p&gt;</summary><category term="VIM"></category></entry><entry><title>VIM : Un Essai de plugin pour la compilation C++</title><link href="http://arntanguy.github.io/blog/vim-un-essai-de-plugin-pour-la-compilation-c.html" rel="alternate"></link><published>2009-12-23T00:00:00+01:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-12-23:blog/vim-un-essai-de-plugin-pour-la-compilation-c.html</id><summary type="html">&lt;p&gt;J’aime beaucoup utiliser vim pour programmer (je n’ai jamais réussi à me faire à la façon de penser d’emacs et vim me convient très bien une fois configuré), mais jusqu’ici une chose me chagrinait, la compilation en c++. Les principaux points qui me dérangeaient étaient :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La liste des erreurs de compilations qui ne reste pas&lt;/li&gt;
&lt;li&gt;La difficulté pour compiler à partir d’un autre dossier. J’utilise beaucoup ceci, notemment avec l’excellent cmake qui permet de réaliser simplement une compilation dans un dossier séparé.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je ne savais pas trop comment faire d’extensions pour vim, je me suis dit que c’était l’occasion de voir.&lt;/p&gt;
&lt;p&gt;J’ai donc fait un petit plugin qui résoud partiellement ces défauts. Il permet de
&lt;em&gt; Compiler à partir du dossier courant, ou d’un autre dossier
&lt;/em&gt; Laisser la fenêtre de compilation (utilisation de quickfix) ouverte, et ainsi, sauter facilement aux erreurs
* Et en prime, d’ajouter automatiquement une bonne partie des includes manquants ! Cette fonctionnalité est assez bancale, et ne fonctionne quand dans les cas ou le nom de la classe est le même que le nom du fichier la contenant, ce qui correspond à mon style de programmation. L’ajout des includes se fait de façon relativement intelligente : si il y a déjà des includes, c’est ajouté à cet endroit, sinon, le plugin essaye de trouver la fin du header et place les includes après. Au pire, on peut spécifier une ligne pour l’ajout.&lt;/p&gt;
&lt;h1 id="installation"&gt;Installation&lt;a class="headerlink" href="#installation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Il suffit de placer le script suivant dans le dossier ~/.vim/ftplugin/cpp, je l’ai nommé make.vim (vous pouvez mettre le nom que vous voulez, tant qu’il a l’extension .vim).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;    &amp;quot;    Copyright (C) 2008  TANGUY Arnaud &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;                                                                             *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; This program is free software; you can redistribute it and/or modify        *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; it under the terms of the GNU General Public License as published by        *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; the Free Software Foundation; version 3 of the License                      *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;                                                                             *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; This program is distributed in the hope that it will be useful,             *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; but WITHOUT ANY WARRANTY; without even the implied warranty of              *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; GNU General Public License for more details.                                *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;                                                                             *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; You should have received a copy of the GNU General Public License along     *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; with this program; if not, write to the Free Software Foundation, Inc.,     *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.                 *&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;******************************************************************************/&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; This is my first vim plugin, so there might be errors or inaccuracies. If&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; you see some mistakes, please let me know.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; *************** DESCRIPTION **********************&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; This is a make plugin for cpp files. It makes, and parse the results to add&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; usefull informations, such as auto-include headers.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; **************** FEATURES ************************&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Features wished but not implemented yet:&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; - Auto add includes after compilation (works fine, at least for Qt).&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   But : File names must be named like the class. I.e if you have a class&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   named TestClass, then the file name must be TestClass.h TestClass.hpp or&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   TestClass&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   When other includes are already presents: add the includes with them&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   Otherwise, guess where to add includes : after the header, or at a default&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   position.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; - Show the quickfix window&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; *************** CONFIGURATION *****************&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; g:default_includes_line    the number of the default include line. It is&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;                            used when not better place is found&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; g:quickfix_size            The number of lines of the quickfix window&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; **************  TODO *******************&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; - Auto (or ask?) add pre-declaration (class Type;) in the header, and the include in&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;   the .cpp file.  To switch beetween files, use a.vim plugin.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; - Seek for innacuracies, and fix them. Optimize too...&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:cpo_save&lt;span class="p"&gt;=&lt;/span&gt;&amp;amp;&lt;span class="nb"&gt;cpo&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;cpo&lt;/span&gt;&amp;amp;&lt;span class="k"&gt;vim&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Do not reload if already loaded&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:loaded_make_plugin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      \ &amp;amp;&amp;amp; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:force_reload_make_plugin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;finish&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:loaded_make_plugin&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Global variables initialisation (if not already set)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:quickfix_size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:quickfix_size&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;


&lt;span class="c"&gt;    &amp;quot; Function : SortUnique&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  :  Works like sort(), optionally taking in a comparator&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;             (just like the original), except that duplicate entries will be removed.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : A list, and optionally a comparator&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : The sorted list&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : Unknown, found on http://vim.wikia.com/wiki/Unique_sorting&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; SortUnique&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; ... &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;dictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; {}
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;list&lt;/span&gt;
        execute &lt;span class="s2"&gt;&amp;quot;let dictionary[ &amp;#39;&amp;quot;&lt;/span&gt; . &lt;span class="k"&gt;i&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;&amp;#39; ] = &amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;endfor&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; result &lt;span class="p"&gt;=&lt;/span&gt; []
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a:1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; result &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; keys&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;dictionary&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; result &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; keys&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;dictionary&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;endif&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; result
    &lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : RemoveMatching&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Delete items in a list, when they are matching items in an&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            another list&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : listRef: The list from which you want to remove items&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            listMatch: The list to compare with&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : The listRef, without matched items&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Note     : This can surely be improved, but I still don&amp;#39;t know much viml&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RemoveMatching&lt;span class="p"&gt;(&lt;/span&gt;listRef&lt;span class="p"&gt;,&lt;/span&gt; listMatch&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; ref_list &lt;span class="p"&gt;=&lt;/span&gt; copy&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:listRef&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;len&lt;span class="p"&gt;(&lt;/span&gt;ref_list&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:listMatch
                &lt;span class="k"&gt;if&lt;/span&gt; ref_list[&lt;span class="k"&gt;i&lt;/span&gt;] &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt;
                    &lt;span class="k"&gt;call&lt;/span&gt; remove&lt;span class="p"&gt;(&lt;/span&gt;ref_list&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;endif&lt;/span&gt;
            &lt;span class="k"&gt;endfor&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;endwhile&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; ref_list
    &lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : GetMissingIncludes (PRIVATE)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Find the missing includes in the compilation error list&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : None&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : Nothing&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; TODO     : Check if the include is in the path, otherwise, ask the user to&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            know what to do.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            Is there all possible related errors messages here ? Let me know&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            if it is not the case&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:GetMissingIncludes&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Get the quickfix errors&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; errors &lt;span class="p"&gt;=&lt;/span&gt; getqflist&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;=&lt;/span&gt; []
&lt;span class="c"&gt;        &amp;quot; To avoid some errors with variables names&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; not_includes &lt;span class="p"&gt;=&lt;/span&gt; []
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; errors
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.* was not declared in this scope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;                &amp;quot; Find the possible name in the error&lt;/span&gt;
&lt;span class="c"&gt;                &amp;quot;let include = substitute(i[&amp;quot;text&amp;quot;], &amp;#39;.*error:..\(.*\)..was not declared in this scope&amp;#39;, &amp;#39;\1&amp;#39;, &amp;#39;g&amp;#39;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.*error:..\(.*\)..was not declared in this scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
&lt;span class="c"&gt;                &amp;quot; Check if it is really a type, and not a variable name&lt;/span&gt;
&lt;span class="c"&gt;                &amp;quot;let nextError = errors[l:count + 1][&amp;quot;text&amp;quot;]&lt;/span&gt;
&lt;span class="c"&gt;                &amp;quot;if(nextError =~ &amp;quot;.* expected .;. before .*&amp;quot;)&lt;/span&gt;
&lt;span class="c"&gt;                    &amp;quot;let not_includes += [substitute(nextError, &amp;#39;.* expected .;. before .\(.*\).&amp;#39;, &amp;#39;\1&amp;#39;, &amp;#39;g&amp;#39;)]&lt;/span&gt;
&lt;span class="c"&gt;                    &amp;quot;let includes += [include]&lt;/span&gt;
&lt;span class="c"&gt;                &amp;quot;endif&lt;/span&gt;
            &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.*variable .* has initializer but incomplete type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.*variable .\(.*\) .* has initializer but incomplete type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
            &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.* aggregate .* has incomplete type and cannot be defined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.* aggregate .\(.*\) .* has incomplete type and cannot be defined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
            &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.* has not been declared&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.* .\(.*\). has not been declared&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
            &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.* incomplete type .* used in nested name specifier&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.* incomplete type .\(.*\). used in nested name specifier&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
            &lt;span class="k"&gt;elseif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.* invalid use of incomplete type .*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;+=&lt;/span&gt; [substitute&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;i&lt;/span&gt;[&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.* invalid use of incomplete type .struct \(.*\).&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;]
            &lt;span class="k"&gt;endif&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;:&lt;span class="k"&gt;count&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;endfor&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Return the found includes name, and sort them, remove doubles&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; tmpReturn &lt;span class="p"&gt;=&lt;/span&gt; RemoveMatching&lt;span class="p"&gt;(&lt;/span&gt;includes&lt;span class="p"&gt;,&lt;/span&gt; not_includes&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; tmpReturn &lt;span class="p"&gt;=&lt;/span&gt; SortUnique&lt;span class="p"&gt;(&lt;/span&gt;tmpReturn&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:CheckInPath&lt;span class="p"&gt;(&lt;/span&gt;tmpReturn&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : CheckInPath&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Check if an include exists in path&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : The includes names list&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : A dictionnary of the found entry :&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;global&amp;quot; =&amp;gt; List   : The global entry (those included with&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               #include &amp;lt;...&amp;gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;local&amp;quot; =&amp;gt; List    : The local entry (those included with&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               #include &amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;unmatched&amp;quot; =&amp;gt; List : The includes not found&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud  &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:CheckInPath&lt;span class="p"&gt;(&lt;/span&gt;includesList&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;=&lt;/span&gt; copy&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:includesList&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; results &lt;span class="p"&gt;=&lt;/span&gt; { &lt;span class="s2"&gt;&amp;quot;global&amp;quot;&lt;/span&gt; : []&lt;span class="p"&gt;,&lt;/span&gt;
                        \&lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt; : []&lt;span class="p"&gt;,&lt;/span&gt;
                        \&lt;span class="s2"&gt;&amp;quot;unmatched&amp;quot;&lt;/span&gt;: [] }
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;inc&lt;/span&gt;  &lt;span class="k"&gt;in&lt;/span&gt; includes
          &lt;span class="k"&gt;let&lt;/span&gt; mpath&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**,/usr/include/**&amp;quot;&lt;/span&gt;
          &lt;span class="k"&gt;let&lt;/span&gt; found &lt;span class="p"&gt;=&lt;/span&gt; findfile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mpath&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; found &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
              &lt;span class="k"&gt;let&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;global&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;+=&lt;/span&gt; [&lt;span class="nb"&gt;inc&lt;/span&gt;]
          &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="c"&gt;              &amp;quot; XXX : strange, why regex don&amp;#39;t works with findfile ?&lt;/span&gt;
              &lt;span class="k"&gt;let&lt;/span&gt; found &lt;span class="p"&gt;=&lt;/span&gt; findfile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;.h&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mpath&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;found &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;let&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;+=&lt;/span&gt; [found]
              &lt;span class="k"&gt;else&lt;/span&gt;
                  &lt;span class="k"&gt;let&lt;/span&gt; found &lt;span class="p"&gt;=&lt;/span&gt; findfile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;inc&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;.hpp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; mpath&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;if&lt;/span&gt; found &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                      &lt;span class="k"&gt;let&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;+=&lt;/span&gt; [found]
                  &lt;span class="k"&gt;else&lt;/span&gt;
                      &lt;span class="k"&gt;let&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;unmatched&amp;quot;&lt;/span&gt;] &lt;span class="p"&gt;+=&lt;/span&gt; [&lt;span class="nb"&gt;inc&lt;/span&gt;]
                  &lt;span class="k"&gt;endif&lt;/span&gt;
              &lt;span class="k"&gt;endif&lt;/span&gt;
          &lt;span class="k"&gt;endif&lt;/span&gt;
        &lt;span class="k"&gt;endfor&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;global&amp;quot;&lt;/span&gt;]
            &lt;span class="k"&gt;echomsg&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;global : &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;endfor&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;j&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt;]
            &lt;span class="k"&gt;echomsg&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local : &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;j&lt;/span&gt;
        &lt;span class="k"&gt;endfor&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;h&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; results[&lt;span class="s2"&gt;&amp;quot;unmatched&amp;quot;&lt;/span&gt;]
            &lt;span class="k"&gt;echomsg&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unmatched : &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;h&lt;/span&gt;
        &lt;span class="k"&gt;endfor&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; results
    &lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : SeekPosition&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Find the best position where the includes will be placed&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : None&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : The found line&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:SeekPosition&lt;span class="p"&gt;()&lt;/span&gt;
        exe &lt;span class="s2"&gt;&amp;quot;normal gg&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Seek the existing includes, to add it here if they exists&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; line &lt;span class="p"&gt;=&lt;/span&gt; search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^#include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; line &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; line
        &lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;        &amp;quot; Otherwise, find a default location. Usually, C files are written with a&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; header, and space is left between header and code. So, we&amp;#39;ll seek the&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; first line without anything but white character on it&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; line &lt;span class="p"&gt;=&lt;/span&gt; search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^\( ?\)*$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; line &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; line
        &lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="c"&gt;        &amp;quot; If not found, set a default value&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g:default_includes_line&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:default_includes_line
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endfunction&lt;/span&gt;


&lt;span class="c"&gt;    &amp;quot; Function : AddIncludes (PRIVATE)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Add the includes given in args in the file&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : includesDict: A list containing the includes name and type&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;global&amp;quot; =&amp;gt; global includes&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;local&amp;quot; =&amp;gt; local includes&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;               &amp;quot;unmatched&amp;quot; =&amp;gt; not found, so ask&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : Nothing&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:AddIncludes&lt;span class="p"&gt;(&lt;/span&gt;includesDict&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;len&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:includesDict&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;s&lt;/span&gt;:SeekPosition&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;include&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:includesDict[&lt;span class="s2"&gt;&amp;quot;local&amp;quot;&lt;/span&gt;]
                exe &lt;span class="s2"&gt;&amp;quot;normal &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;l&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;GO#include &amp;quot;&amp;#39;&lt;/span&gt;.&lt;span class="nb"&gt;include&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;endfor&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;inc&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:includesDict[&lt;span class="s2"&gt;&amp;quot;global&amp;quot;&lt;/span&gt;]
                exe &lt;span class="s2"&gt;&amp;quot;normal &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;l&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;GO#include &amp;lt;&amp;#39;&lt;/span&gt;.&lt;span class="nb"&gt;inc&lt;/span&gt;.&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span class="k"&gt;endfor&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;a&lt;/span&gt;:includesDict[&lt;span class="s2"&gt;&amp;quot;unmatched&amp;quot;&lt;/span&gt;]
                &lt;span class="k"&gt;echomsg&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unmatched &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;i&lt;/span&gt;
            &lt;span class="k"&gt;endfor&lt;/span&gt;

&lt;span class="c"&gt;            &amp;quot; Once the includes are added, rebuild&lt;/span&gt;
            &lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; execute &amp;amp;&lt;span class="nb"&gt;makeprg&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : MyMake&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  : Build a cpp project, using make, and doing some more cool stuff.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            This function call everything needed for this plugin : autoadd&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot;            includes...&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     : None&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  : 1 if path1 is equal to path2, 0 otherwise.&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud &amp;lt;arn.tanguy@gmail.com&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:MakeIncludes&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot;exe &amp;amp;makeprg&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:Make&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; includes &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:GetMissingIncludes&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:AddIncludes&lt;span class="p"&gt;(&lt;/span&gt;includes&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endf&lt;/span&gt;

&lt;span class="c"&gt;    &amp;quot; Function : s:Make&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Purpose  :&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Args     :&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Returns  :&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Author   : TANGUY Arnaud&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:Make&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Save the old directory, and go to the new one&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; olddir&lt;span class="p"&gt;=&lt;/span&gt;getcwd&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;dir&lt;/span&gt;  &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            execute &lt;span class="s2"&gt;&amp;quot;:lcd &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;a&lt;/span&gt;:&lt;span class="nb"&gt;dir&lt;/span&gt;
        &lt;span class="k"&gt;endif&lt;/span&gt;
        &lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; exe &amp;amp;&lt;span class="nb"&gt;makeprg&lt;/span&gt;
        execute &lt;span class="s2"&gt;&amp;quot;:lcd &amp;quot;&lt;/span&gt;.olddir
        &lt;span class="k"&gt;let&lt;/span&gt; winnum &lt;span class="p"&gt;=&lt;/span&gt;winnr&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; get current window number&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; g:quickfix_size lines big for the quickfix window&lt;/span&gt;
        exe &lt;span class="s2"&gt;&amp;quot;cope &amp;quot;&lt;/span&gt;.&lt;span class="k"&gt;g&lt;/span&gt;:quickfix_size
&lt;span class="c"&gt;        &amp;quot; Open the quickfix window&lt;/span&gt;
        &lt;span class="k"&gt;cw&lt;/span&gt;
&lt;span class="c"&gt;        &amp;quot; Go to the first error&lt;/span&gt;
        execute winnum . &lt;span class="s2"&gt;&amp;quot;wincmd w&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;endfunction&lt;/span&gt;


    &lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; Mi   &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:MakeIncludes&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; Mid   &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:MakeIncludes&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
    &lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; Mm  &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:Make&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;    &amp;quot; Make in an other directory&lt;/span&gt;
    &lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; Mmd  &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;s&lt;/span&gt;:Make&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;args&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;cpo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;s&lt;/span&gt;:cpo_save
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="utilisation"&gt;Utilisation&lt;a class="headerlink" href="#utilisation" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Le script s’utilise en mode commande:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;:Mm    compile dans le dossier courant&lt;/li&gt;
&lt;li&gt;:Mmd "build/" compile dans le sous dossier. Vous devez mettre le chemin du dossier de compilation dans les guillemets. Le chemin peut être relatif ou absolu.&lt;/li&gt;
&lt;li&gt;:Mi  compile et ajoute les includes&lt;/li&gt;
&lt;li&gt;:Mid "build/"  compile dans un autre dossier, et ajoute les includes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Il s’agit de mon premier plugin vim, par conséquent il est probablement codé maladroitement par moments. La fonctionnalité permettant d’ajouter automatiquement des includes est loin d’être parfaite, il se peut que vous ayez besoin d’en ajouter manuellement. Parfois, trop d’includes sont ajoutés (par exemple quand un include en inclut un autre, les 2 sont quand même ajouté alors que ce n’est pas nécessaire). Ce système fonctionne bien avec le framwork Qt avec lequel je travaille beaucoup.&lt;/p&gt;
&lt;p&gt;J’essayerai d’améliorer ça à l’occasion, pour l’instant ça me suffit pour compiler. Une chose que j’aimerai faire, c’est pouvoir faire une compilation non bloquante : pouvoir continuer à utiliser vim durant le temps de compilation, mais ça me semble assez compliqué…&lt;/p&gt;</summary><category term="VIM"></category></entry><entry><title>FOTOWALL : 100 000 !</title><link href="http://arntanguy.github.io/blog/fotowall-100-000.html" rel="alternate"></link><published>2009-09-06T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-09-06:blog/fotowall-100-000.html</id><summary type="html">&lt;p&gt;Aujourd’hui, Fotowall a atteind les &lt;strong&gt;100 000&lt;/strong&gt; télécharments ! C’est un
résultat impressionnant, et c’est encore plus incroyable en considérant que
nous n’avons pas de page d’accueil, pas de publicité autre que le bouche à
oreille. Et ces téléchargements ne concernent que la version XP/Vista. Il est
très difficile d’évaluer le nombre d’utilisateurs parmis les autres sytèmes, en
particulier GNU/Linux avec les divers gestionnaires de paquets, clones git,
installations à partir des sources… Rien que sur
&lt;a href="http://kde-apps.org/"&gt;kde-apps&lt;/a&gt;, on dénombre plus 5183 téléchargements, il semble donc que Fotowall rencontre un certain succès auprès des utilisateurs de logiciel libres.
Pour célébrer ce résultat, voici une petite vidéo de la prochaine version (qui sortira d’ici une semaine) :&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/lggxIIQh7-U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Un grand merci à toute l’équipe : &lt;em&gt;Enrico Ros, Arnaud Tanguy&lt;/em&gt;, Alessandro Portale, Andreas Brech, Georges Dubus, ainsi qu’aux traducteurs Martin Zimmermann and Marcio Moraes.&lt;/p&gt;</summary><category term="fotowall"></category></entry><entry><title>FotoWall 0.7</title><link href="http://arntanguy.github.io/blog/fotowall-07.html" rel="alternate"></link><published>2009-07-24T00:00:00+02:00</published><author><name>Arnaud TANGUY</name></author><id>tag:arntanguy.github.io,2009-07-24:blog/fotowall-07.html</id><summary type="html">&lt;p&gt;FotoWall est un logiciel libre disponible sous licence GPL développé par Enrico Ros et moi-même. Il vous permet de présenter simplement vos photos, en les disposant aisément, appliquant des transformations (rotations, perspectives, effets). Nous venons de réaliser une nouvelle version, d’où cet article pour vous faire découvrir FotoWall pour ceux qui ne connaissent pas, et informer les autres.&lt;/p&gt;
&lt;p&gt;Voici la liste des principales fonctionnalités (non exhaustive) :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disposer facilement vos images&lt;/li&gt;
&lt;li&gt;redimensionner, faire pivoter des images&lt;/li&gt;
&lt;li&gt;appliquer des effets aux images : niveau de gris, noir et blanc, inverser les couleurs, contrastes… chaque image peut être enregistrée séparément, ce qui permet d’utiliser ce logiciel pour d’autres usages que celui initial.&lt;/li&gt;
&lt;li&gt;mettre la photo dans un "cadre" (cœur, carré coloré…).&lt;/li&gt;
&lt;li&gt;imprimer un poster (grâce au logiciel libre posterazor).&lt;/li&gt;
&lt;li&gt;imprimer vos créations au format voulu (taille réelle, cd, dvd…)&lt;/li&gt;
&lt;li&gt;faire une recherche sur flickr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="FotoWall 0.7" src="http://arntanguy.github.io/blog/images/fotowall/fotowall0.7.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pour installer fotowall sous Ubuntu, suivez les instructions de la
&lt;a href="http://doc.ubuntu-fr.org/fotowall"&gt;documentation Ubuntu-fr&lt;/a&gt;.
La méthode est similaire pour les autres systèmes.
Les utilisateurs de Windows trouverons un éxécutable sur &lt;a href="http://code.google.com/p/fotowall/downloads/list"&gt;google
code&lt;/a&gt;&lt;/p&gt;</summary><category term="fotowall"></category></entry></feed>